
ParkingSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000031fa  0000328e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800080  00800080  000032ae  2**0
                  ALLOC
  3 .stab         0000294c  00000000  00000000  000032b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f36  00000000  00000000  00005bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000aeec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b32e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bbbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 18 	call	0x30ce	; 0x30ce <main>
      8a:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 18 	jmp	0x315e	; 0x315e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 18 	jmp	0x315e	; 0x315e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e7       	ldi	r22, 0x77	; 119
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b7 18 	jmp	0x316e	; 0x316e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Ultrasonic_init>:
#include <util/delay.h>

uint8 g_edgeCount = 0;
uint16 g_time ;

void Ultrasonic_init(void) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <Ultrasonic_init+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62

	ICU_ConfigType ICU_Configurations = {F_CPU_8,RAISING};
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	8a 83       	std	Y+2, r24	; 0x02
	ICU_init(&ICU_Configurations);
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	0e 94 22 0b 	call	0x1644	; 0x1644 <ICU_init>
	GPIO_setupPinDirection(TRIG_PORT_ID,TRIG_PIN_ID,PIN_OUTPUT);
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	67 e0       	ldi	r22, 0x07	; 7
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	0e 94 b1 07 	call	0xf62	; 0xf62 <GPIO_setupPinDirection>
	ICU_setCallBack(Ultrasonic_edgeProcessing);
     cc2:	83 e6       	ldi	r24, 0x63	; 99
     cc4:	97 e0       	ldi	r25, 0x07	; 7
     cc6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <ICU_setCallBack>
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <Ultrasonic_Trigger>:
void Ultrasonic_Trigger(void){
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	68 97       	sbiw	r28, 0x18	; 24
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(TRIG_PORT_ID,TRIG_PIN_ID,LOGIC_HIGH);
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	67 e0       	ldi	r22, 0x07	; 7
     cec:	41 e0       	ldi	r20, 0x01	; 1
     cee:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a0 e2       	ldi	r26, 0x20	; 32
     cf8:	b1 e4       	ldi	r27, 0x41	; 65
     cfa:	8d 8b       	std	Y+21, r24	; 0x15
     cfc:	9e 8b       	std	Y+22, r25	; 0x16
     cfe:	af 8b       	std	Y+23, r26	; 0x17
     d00:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d02:	6d 89       	ldd	r22, Y+21	; 0x15
     d04:	7e 89       	ldd	r23, Y+22	; 0x16
     d06:	8f 89       	ldd	r24, Y+23	; 0x17
     d08:	98 8d       	ldd	r25, Y+24	; 0x18
     d0a:	2b ea       	ldi	r18, 0xAB	; 171
     d0c:	3a ea       	ldi	r19, 0xAA	; 170
     d0e:	4a ea       	ldi	r20, 0xAA	; 170
     d10:	50 e4       	ldi	r21, 0x40	; 64
     d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	89 8b       	std	Y+17, r24	; 0x11
     d1c:	9a 8b       	std	Y+18, r25	; 0x12
     d1e:	ab 8b       	std	Y+19, r26	; 0x13
     d20:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d22:	69 89       	ldd	r22, Y+17	; 0x11
     d24:	7a 89       	ldd	r23, Y+18	; 0x12
     d26:	8b 89       	ldd	r24, Y+19	; 0x13
     d28:	9c 89       	ldd	r25, Y+20	; 0x14
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e8       	ldi	r20, 0x80	; 128
     d30:	5f e3       	ldi	r21, 0x3F	; 63
     d32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d36:	88 23       	and	r24, r24
     d38:	1c f4       	brge	.+6      	; 0xd40 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	88 8b       	std	Y+16, r24	; 0x10
     d3e:	91 c0       	rjmp	.+290    	; 0xe62 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
     d40:	69 89       	ldd	r22, Y+17	; 0x11
     d42:	7a 89       	ldd	r23, Y+18	; 0x12
     d44:	8b 89       	ldd	r24, Y+19	; 0x13
     d46:	9c 89       	ldd	r25, Y+20	; 0x14
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	4f e7       	ldi	r20, 0x7F	; 127
     d4e:	53 e4       	ldi	r21, 0x43	; 67
     d50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d54:	18 16       	cp	r1, r24
     d56:	0c f0       	brlt	.+2      	; 0xd5a <Ultrasonic_Trigger+0x86>
     d58:	7b c0       	rjmp	.+246    	; 0xe50 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
     d5a:	6d 89       	ldd	r22, Y+21	; 0x15
     d5c:	7e 89       	ldd	r23, Y+22	; 0x16
     d5e:	8f 89       	ldd	r24, Y+23	; 0x17
     d60:	98 8d       	ldd	r25, Y+24	; 0x18
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	4a e7       	ldi	r20, 0x7A	; 122
     d68:	54 e4       	ldi	r21, 0x44	; 68
     d6a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	8c 87       	std	Y+12, r24	; 0x0c
     d74:	9d 87       	std	Y+13, r25	; 0x0d
     d76:	ae 87       	std	Y+14, r26	; 0x0e
     d78:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d7a:	6c 85       	ldd	r22, Y+12	; 0x0c
     d7c:	7d 85       	ldd	r23, Y+13	; 0x0d
     d7e:	8e 85       	ldd	r24, Y+14	; 0x0e
     d80:	9f 85       	ldd	r25, Y+15	; 0x0f
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	4a e7       	ldi	r20, 0x7A	; 122
     d88:	55 e4       	ldi	r21, 0x45	; 69
     d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	88 87       	std	Y+8, r24	; 0x08
     d94:	99 87       	std	Y+9, r25	; 0x09
     d96:	aa 87       	std	Y+10, r26	; 0x0a
     d98:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     d9a:	68 85       	ldd	r22, Y+8	; 0x08
     d9c:	79 85       	ldd	r23, Y+9	; 0x09
     d9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     da0:	9b 85       	ldd	r25, Y+11	; 0x0b
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e8       	ldi	r20, 0x80	; 128
     da8:	5f e3       	ldi	r21, 0x3F	; 63
     daa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     dae:	88 23       	and	r24, r24
     db0:	2c f4       	brge	.+10     	; 0xdbc <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	9f 83       	std	Y+7, r25	; 0x07
     db8:	8e 83       	std	Y+6, r24	; 0x06
     dba:	3f c0       	rjmp	.+126    	; 0xe3a <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
     dbc:	68 85       	ldd	r22, Y+8	; 0x08
     dbe:	79 85       	ldd	r23, Y+9	; 0x09
     dc0:	8a 85       	ldd	r24, Y+10	; 0x0a
     dc2:	9b 85       	ldd	r25, Y+11	; 0x0b
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	3f ef       	ldi	r19, 0xFF	; 255
     dc8:	4f e7       	ldi	r20, 0x7F	; 127
     dca:	57 e4       	ldi	r21, 0x47	; 71
     dcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     dd0:	18 16       	cp	r1, r24
     dd2:	4c f5       	brge	.+82     	; 0xe26 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd4:	6c 85       	ldd	r22, Y+12	; 0x0c
     dd6:	7d 85       	ldd	r23, Y+13	; 0x0d
     dd8:	8e 85       	ldd	r24, Y+14	; 0x0e
     dda:	9f 85       	ldd	r25, Y+15	; 0x0f
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e2       	ldi	r20, 0x20	; 32
     de2:	51 e4       	ldi	r21, 0x41	; 65
     de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	bc 01       	movw	r22, r24
     dee:	cd 01       	movw	r24, r26
     df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	9f 83       	std	Y+7, r25	; 0x07
     dfa:	8e 83       	std	Y+6, r24	; 0x06
     dfc:	0f c0       	rjmp	.+30     	; 0xe1c <Ultrasonic_Trigger+0x148>
     dfe:	80 e9       	ldi	r24, 0x90	; 144
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	9d 83       	std	Y+5, r25	; 0x05
     e04:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	9d 81       	ldd	r25, Y+5	; 0x05
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <Ultrasonic_Trigger+0x136>
     e0e:	9d 83       	std	Y+5, r25	; 0x05
     e10:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e12:	8e 81       	ldd	r24, Y+6	; 0x06
     e14:	9f 81       	ldd	r25, Y+7	; 0x07
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	9f 83       	std	Y+7, r25	; 0x07
     e1a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1c:	8e 81       	ldd	r24, Y+6	; 0x06
     e1e:	9f 81       	ldd	r25, Y+7	; 0x07
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	69 f7       	brne	.-38     	; 0xdfe <Ultrasonic_Trigger+0x12a>
     e24:	24 c0       	rjmp	.+72     	; 0xe6e <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e26:	68 85       	ldd	r22, Y+8	; 0x08
     e28:	79 85       	ldd	r23, Y+9	; 0x09
     e2a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e2c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	9f 83       	std	Y+7, r25	; 0x07
     e38:	8e 83       	std	Y+6, r24	; 0x06
     e3a:	8e 81       	ldd	r24, Y+6	; 0x06
     e3c:	9f 81       	ldd	r25, Y+7	; 0x07
     e3e:	9b 83       	std	Y+3, r25	; 0x03
     e40:	8a 83       	std	Y+2, r24	; 0x02
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	9b 81       	ldd	r25, Y+3	; 0x03
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <Ultrasonic_Trigger+0x172>
     e4a:	9b 83       	std	Y+3, r25	; 0x03
     e4c:	8a 83       	std	Y+2, r24	; 0x02
     e4e:	0f c0       	rjmp	.+30     	; 0xe6e <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e50:	69 89       	ldd	r22, Y+17	; 0x11
     e52:	7a 89       	ldd	r23, Y+18	; 0x12
     e54:	8b 89       	ldd	r24, Y+19	; 0x13
     e56:	9c 89       	ldd	r25, Y+20	; 0x14
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	88 8b       	std	Y+16, r24	; 0x10
     e62:	88 89       	ldd	r24, Y+16	; 0x10
     e64:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	8a 95       	dec	r24
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <Ultrasonic_Trigger+0x194>
     e6c:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
	GPIO_writePin(TRIG_PORT_ID,TRIG_PIN_ID,LOGIC_LOW);
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	67 e0       	ldi	r22, 0x07	; 7
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
}
     e78:	68 96       	adiw	r28, 0x18	; 24
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <Ultrasonic_readDistance>:
uint16 Ultrasonic_readDistance(void) {
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_Trigger();
     e92:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Ultrasonic_Trigger>
    return ((g_time * 10) / 1176)+1;
     e96:	80 91 83 00 	lds	r24, 0x0083
     e9a:	90 91 84 00 	lds	r25, 0x0084
     e9e:	9c 01       	movw	r18, r24
     ea0:	22 0f       	add	r18, r18
     ea2:	33 1f       	adc	r19, r19
     ea4:	c9 01       	movw	r24, r18
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	82 0f       	add	r24, r18
     eb0:	93 1f       	adc	r25, r19
     eb2:	28 e9       	ldi	r18, 0x98	; 152
     eb4:	34 e0       	ldi	r19, 0x04	; 4
     eb6:	b9 01       	movw	r22, r18
     eb8:	0e 94 7f 18 	call	0x30fe	; 0x30fe <__udivmodhi4>
     ebc:	cb 01       	movw	r24, r22
     ebe:	01 96       	adiw	r24, 0x01	; 1
}
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <Ultrasonic_edgeProcessing>:
void Ultrasonic_edgeProcessing(void) {
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
     ece:	80 91 80 00 	lds	r24, 0x0080
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
     ed4:	80 93 80 00 	sts	0x0080, r24
	if(g_edgeCount == 1)
     ed8:	80 91 80 00 	lds	r24, 0x0080
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	31 f4       	brne	.+12     	; 0xeec <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
     ee0:	0e 94 a7 0b 	call	0x174e	; 0x174e <ICU_clearTimerValue>
		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <ICU_setEdgeDetectionType>
     eea:	0f c0       	rjmp	.+30     	; 0xf0a <Ultrasonic_edgeProcessing+0x44>
	}
	else if(g_edgeCount == 2)
     eec:	80 91 80 00 	lds	r24, 0x0080
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	59 f4       	brne	.+22     	; 0xf0a <Ultrasonic_edgeProcessing+0x44>
	{
		g_time = ICU_getInputCaptureValue();
     ef4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <ICU_getInputCaptureValue>
     ef8:	90 93 84 00 	sts	0x0084, r25
     efc:	80 93 83 00 	sts	0x0083, r24
		ICU_setEdgeDetectionType(RAISING);
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <ICU_setEdgeDetectionType>
		g_edgeCount=0;
     f06:	10 92 80 00 	sts	0x0080, r1
	}

}
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <Buzzer_init>:
 *      Author: MOH
 */
#include "common_macros.h"
#include "gpio.h"
#include "buzzer.h"
void Buzzer_init(void){
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	65 e0       	ldi	r22, 0x05	; 5
     f1c:	41 e0       	ldi	r20, 0x01	; 1
     f1e:	0e 94 b1 07 	call	0xf62	; 0xf62 <GPIO_setupPinDirection>
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID,LOGIC_LOW);
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	65 e0       	ldi	r22, 0x05	; 5
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <Buzzer_on>:
void Buzzer_on(void){
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	65 e0       	ldi	r22, 0x05	; 5
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <Buzzer_off>:
void Buzzer_off(void){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	65 e0       	ldi	r22, 0x05	; 5
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <GPIO_setupPinDirection+0x6>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <GPIO_setupPinDirection+0x8>
     f6a:	0f 92       	push	r0
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	6a 83       	std	Y+2, r22	; 0x02
     f74:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	88 30       	cpi	r24, 0x08	; 8
     f7a:	08 f0       	brcs	.+2      	; 0xf7e <GPIO_setupPinDirection+0x1c>
     f7c:	d5 c0       	rjmp	.+426    	; 0x1128 <GPIO_setupPinDirection+0x1c6>
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	84 30       	cpi	r24, 0x04	; 4
     f82:	08 f0       	brcs	.+2      	; 0xf86 <GPIO_setupPinDirection+0x24>
     f84:	d1 c0       	rjmp	.+418    	; 0x1128 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	3d 83       	std	Y+5, r19	; 0x05
     f8e:	2c 83       	std	Y+4, r18	; 0x04
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	91 05       	cpc	r25, r1
     f98:	09 f4       	brne	.+2      	; 0xf9c <GPIO_setupPinDirection+0x3a>
     f9a:	43 c0       	rjmp	.+134    	; 0x1022 <GPIO_setupPinDirection+0xc0>
     f9c:	2c 81       	ldd	r18, Y+4	; 0x04
     f9e:	3d 81       	ldd	r19, Y+5	; 0x05
     fa0:	22 30       	cpi	r18, 0x02	; 2
     fa2:	31 05       	cpc	r19, r1
     fa4:	2c f4       	brge	.+10     	; 0xfb0 <GPIO_setupPinDirection+0x4e>
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	71 f0       	breq	.+28     	; 0xfca <GPIO_setupPinDirection+0x68>
     fae:	bc c0       	rjmp	.+376    	; 0x1128 <GPIO_setupPinDirection+0x1c6>
     fb0:	2c 81       	ldd	r18, Y+4	; 0x04
     fb2:	3d 81       	ldd	r19, Y+5	; 0x05
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	31 05       	cpc	r19, r1
     fb8:	09 f4       	brne	.+2      	; 0xfbc <GPIO_setupPinDirection+0x5a>
     fba:	5f c0       	rjmp	.+190    	; 0x107a <GPIO_setupPinDirection+0x118>
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9d 81       	ldd	r25, Y+5	; 0x05
     fc0:	83 30       	cpi	r24, 0x03	; 3
     fc2:	91 05       	cpc	r25, r1
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <GPIO_setupPinDirection+0x66>
     fc6:	85 c0       	rjmp	.+266    	; 0x10d2 <GPIO_setupPinDirection+0x170>
     fc8:	af c0       	rjmp	.+350    	; 0x1128 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	a1 f4       	brne	.+40     	; 0xff8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     fd0:	aa e3       	ldi	r26, 0x3A	; 58
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ea e3       	ldi	r30, 0x3A	; 58
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <GPIO_setupPinDirection+0x8c>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <GPIO_setupPinDirection+0x88>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	98 c0       	rjmp	.+304    	; 0x1128 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     ff8:	aa e3       	ldi	r26, 0x3A	; 58
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ea e3       	ldi	r30, 0x3A	; 58
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <GPIO_setupPinDirection+0xb4>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <GPIO_setupPinDirection+0xb0>
    101a:	80 95       	com	r24
    101c:	84 23       	and	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	83 c0       	rjmp	.+262    	; 0x1128 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	a1 f4       	brne	.+40     	; 0x1050 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1028:	a7 e3       	ldi	r26, 0x37	; 55
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e7 e3       	ldi	r30, 0x37	; 55
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <GPIO_setupPinDirection+0xe4>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <GPIO_setupPinDirection+0xe0>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	6c c0       	rjmp	.+216    	; 0x1128 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1050:	a7 e3       	ldi	r26, 0x37	; 55
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e7 e3       	ldi	r30, 0x37	; 55
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <GPIO_setupPinDirection+0x10c>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <GPIO_setupPinDirection+0x108>
    1072:	80 95       	com	r24
    1074:	84 23       	and	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	57 c0       	rjmp	.+174    	; 0x1128 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	a1 f4       	brne	.+40     	; 0x10a8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1080:	a4 e3       	ldi	r26, 0x34	; 52
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e4 e3       	ldi	r30, 0x34	; 52
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <GPIO_setupPinDirection+0x13c>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <GPIO_setupPinDirection+0x138>
    10a2:	84 2b       	or	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	40 c0       	rjmp	.+128    	; 0x1128 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    10a8:	a4 e3       	ldi	r26, 0x34	; 52
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e4 e3       	ldi	r30, 0x34	; 52
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <GPIO_setupPinDirection+0x164>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <GPIO_setupPinDirection+0x160>
    10ca:	80 95       	com	r24
    10cc:	84 23       	and	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	2b c0       	rjmp	.+86     	; 0x1128 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	a1 f4       	brne	.+40     	; 0x1100 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    10d8:	a1 e3       	ldi	r26, 0x31	; 49
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e1 e3       	ldi	r30, 0x31	; 49
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <GPIO_setupPinDirection+0x194>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <GPIO_setupPinDirection+0x190>
    10fa:	84 2b       	or	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	14 c0       	rjmp	.+40     	; 0x1128 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1100:	a1 e3       	ldi	r26, 0x31	; 49
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e1 e3       	ldi	r30, 0x31	; 49
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <GPIO_setupPinDirection+0x1bc>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <GPIO_setupPinDirection+0x1b8>
    1122:	80 95       	com	r24
    1124:	84 23       	and	r24, r20
    1126:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_writePin+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_writePin+0x8>
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	6a 83       	std	Y+2, r22	; 0x02
    114a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	88 30       	cpi	r24, 0x08	; 8
    1150:	08 f0       	brcs	.+2      	; 0x1154 <GPIO_writePin+0x1c>
    1152:	d5 c0       	rjmp	.+426    	; 0x12fe <GPIO_writePin+0x1c6>
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	84 30       	cpi	r24, 0x04	; 4
    1158:	08 f0       	brcs	.+2      	; 0x115c <GPIO_writePin+0x24>
    115a:	d1 c0       	rjmp	.+418    	; 0x12fe <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3d 83       	std	Y+5, r19	; 0x05
    1164:	2c 83       	std	Y+4, r18	; 0x04
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <GPIO_writePin+0x3a>
    1170:	43 c0       	rjmp	.+134    	; 0x11f8 <GPIO_writePin+0xc0>
    1172:	2c 81       	ldd	r18, Y+4	; 0x04
    1174:	3d 81       	ldd	r19, Y+5	; 0x05
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	2c f4       	brge	.+10     	; 0x1186 <GPIO_writePin+0x4e>
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	71 f0       	breq	.+28     	; 0x11a0 <GPIO_writePin+0x68>
    1184:	bc c0       	rjmp	.+376    	; 0x12fe <GPIO_writePin+0x1c6>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	09 f4       	brne	.+2      	; 0x1192 <GPIO_writePin+0x5a>
    1190:	5f c0       	rjmp	.+190    	; 0x1250 <GPIO_writePin+0x118>
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	9d 81       	ldd	r25, Y+5	; 0x05
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	91 05       	cpc	r25, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <GPIO_writePin+0x66>
    119c:	85 c0       	rjmp	.+266    	; 0x12a8 <GPIO_writePin+0x170>
    119e:	af c0       	rjmp	.+350    	; 0x12fe <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	a1 f4       	brne	.+40     	; 0x11ce <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    11a6:	ab e3       	ldi	r26, 0x3B	; 59
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	eb e3       	ldi	r30, 0x3B	; 59
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <GPIO_writePin+0x8c>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <GPIO_writePin+0x88>
    11c8:	84 2b       	or	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	98 c0       	rjmp	.+304    	; 0x12fe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    11ce:	ab e3       	ldi	r26, 0x3B	; 59
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	eb e3       	ldi	r30, 0x3B	; 59
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <GPIO_writePin+0xb4>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <GPIO_writePin+0xb0>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	83 c0       	rjmp	.+262    	; 0x12fe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	a1 f4       	brne	.+40     	; 0x1226 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    11fe:	a8 e3       	ldi	r26, 0x38	; 56
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e8 e3       	ldi	r30, 0x38	; 56
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <GPIO_writePin+0xe4>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <GPIO_writePin+0xe0>
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	6c c0       	rjmp	.+216    	; 0x12fe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1226:	a8 e3       	ldi	r26, 0x38	; 56
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e8 e3       	ldi	r30, 0x38	; 56
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <GPIO_writePin+0x10c>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <GPIO_writePin+0x108>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	57 c0       	rjmp	.+174    	; 0x12fe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	a1 f4       	brne	.+40     	; 0x127e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1256:	a5 e3       	ldi	r26, 0x35	; 53
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e5 e3       	ldi	r30, 0x35	; 53
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <GPIO_writePin+0x13c>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <GPIO_writePin+0x138>
    1278:	84 2b       	or	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	40 c0       	rjmp	.+128    	; 0x12fe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    127e:	a5 e3       	ldi	r26, 0x35	; 53
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e3       	ldi	r30, 0x35	; 53
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <GPIO_writePin+0x164>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <GPIO_writePin+0x160>
    12a0:	80 95       	com	r24
    12a2:	84 23       	and	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	2b c0       	rjmp	.+86     	; 0x12fe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	a1 f4       	brne	.+40     	; 0x12d6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    12ae:	a2 e3       	ldi	r26, 0x32	; 50
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e2 e3       	ldi	r30, 0x32	; 50
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <GPIO_writePin+0x194>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <GPIO_writePin+0x190>
    12d0:	84 2b       	or	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    12d6:	a2 e3       	ldi	r26, 0x32	; 50
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <GPIO_writePin+0x1bc>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <GPIO_writePin+0x1b8>
    12f8:	80 95       	com	r24
    12fa:	84 23       	and	r24, r20
    12fc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <GPIO_readPin+0x6>
    1314:	00 d0       	rcall	.+0      	; 0x1316 <GPIO_readPin+0x8>
    1316:	0f 92       	push	r0
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	8a 83       	std	Y+2, r24	; 0x02
    131e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1320:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	88 30       	cpi	r24, 0x08	; 8
    1326:	08 f0       	brcs	.+2      	; 0x132a <GPIO_readPin+0x1c>
    1328:	84 c0       	rjmp	.+264    	; 0x1432 <GPIO_readPin+0x124>
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	84 30       	cpi	r24, 0x04	; 4
    132e:	08 f0       	brcs	.+2      	; 0x1332 <GPIO_readPin+0x24>
    1330:	80 c0       	rjmp	.+256    	; 0x1432 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3d 83       	std	Y+5, r19	; 0x05
    133a:	2c 83       	std	Y+4, r18	; 0x04
    133c:	4c 81       	ldd	r20, Y+4	; 0x04
    133e:	5d 81       	ldd	r21, Y+5	; 0x05
    1340:	41 30       	cpi	r20, 0x01	; 1
    1342:	51 05       	cpc	r21, r1
    1344:	79 f1       	breq	.+94     	; 0x13a4 <GPIO_readPin+0x96>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	82 30       	cpi	r24, 0x02	; 2
    134c:	91 05       	cpc	r25, r1
    134e:	34 f4       	brge	.+12     	; 0x135c <GPIO_readPin+0x4e>
    1350:	2c 81       	ldd	r18, Y+4	; 0x04
    1352:	3d 81       	ldd	r19, Y+5	; 0x05
    1354:	21 15       	cp	r18, r1
    1356:	31 05       	cpc	r19, r1
    1358:	69 f0       	breq	.+26     	; 0x1374 <GPIO_readPin+0x66>
    135a:	6b c0       	rjmp	.+214    	; 0x1432 <GPIO_readPin+0x124>
    135c:	4c 81       	ldd	r20, Y+4	; 0x04
    135e:	5d 81       	ldd	r21, Y+5	; 0x05
    1360:	42 30       	cpi	r20, 0x02	; 2
    1362:	51 05       	cpc	r21, r1
    1364:	b9 f1       	breq	.+110    	; 0x13d4 <GPIO_readPin+0xc6>
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	91 05       	cpc	r25, r1
    136e:	09 f4       	brne	.+2      	; 0x1372 <GPIO_readPin+0x64>
    1370:	49 c0       	rjmp	.+146    	; 0x1404 <GPIO_readPin+0xf6>
    1372:	5f c0       	rjmp	.+190    	; 0x1432 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1374:	e9 e3       	ldi	r30, 0x39	; 57
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a9 01       	movw	r20, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <GPIO_readPin+0x7e>
    1388:	55 95       	asr	r21
    138a:	47 95       	ror	r20
    138c:	8a 95       	dec	r24
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <GPIO_readPin+0x7a>
    1390:	ca 01       	movw	r24, r20
    1392:	81 70       	andi	r24, 0x01	; 1
    1394:	90 70       	andi	r25, 0x00	; 0
    1396:	88 23       	and	r24, r24
    1398:	19 f0       	breq	.+6      	; 0x13a0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	49 c0       	rjmp	.+146    	; 0x1432 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13a0:	19 82       	std	Y+1, r1	; 0x01
    13a2:	47 c0       	rjmp	.+142    	; 0x1432 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    13a4:	e6 e3       	ldi	r30, 0x36	; 54
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_readPin+0xae>
    13b8:	55 95       	asr	r21
    13ba:	47 95       	ror	r20
    13bc:	8a 95       	dec	r24
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_readPin+0xaa>
    13c0:	ca 01       	movw	r24, r20
    13c2:	81 70       	andi	r24, 0x01	; 1
    13c4:	90 70       	andi	r25, 0x00	; 0
    13c6:	88 23       	and	r24, r24
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	31 c0       	rjmp	.+98     	; 0x1432 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13d0:	19 82       	std	Y+1, r1	; 0x01
    13d2:	2f c0       	rjmp	.+94     	; 0x1432 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    13d4:	e3 e3       	ldi	r30, 0x33	; 51
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a9 01       	movw	r20, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <GPIO_readPin+0xde>
    13e8:	55 95       	asr	r21
    13ea:	47 95       	ror	r20
    13ec:	8a 95       	dec	r24
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <GPIO_readPin+0xda>
    13f0:	ca 01       	movw	r24, r20
    13f2:	81 70       	andi	r24, 0x01	; 1
    13f4:	90 70       	andi	r25, 0x00	; 0
    13f6:	88 23       	and	r24, r24
    13f8:	19 f0       	breq	.+6      	; 0x1400 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	19 c0       	rjmp	.+50     	; 0x1432 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1400:	19 82       	std	Y+1, r1	; 0x01
    1402:	17 c0       	rjmp	.+46     	; 0x1432 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1404:	e0 e3       	ldi	r30, 0x30	; 48
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a9 01       	movw	r20, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <GPIO_readPin+0x10e>
    1418:	55 95       	asr	r21
    141a:	47 95       	ror	r20
    141c:	8a 95       	dec	r24
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <GPIO_readPin+0x10a>
    1420:	ca 01       	movw	r24, r20
    1422:	81 70       	andi	r24, 0x01	; 1
    1424:	90 70       	andi	r25, 0x00	; 0
    1426:	88 23       	and	r24, r24
    1428:	19 f0       	breq	.+6      	; 0x1430 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1430:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	00 d0       	rcall	.+0      	; 0x144a <GPIO_setupPortDirection+0x6>
    144a:	00 d0       	rcall	.+0      	; 0x144c <GPIO_setupPortDirection+0x8>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	84 30       	cpi	r24, 0x04	; 4
    1458:	90 f5       	brcc	.+100    	; 0x14be <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	3c 83       	std	Y+4, r19	; 0x04
    1462:	2b 83       	std	Y+3, r18	; 0x03
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	91 05       	cpc	r25, r1
    146c:	d1 f0       	breq	.+52     	; 0x14a2 <GPIO_setupPortDirection+0x5e>
    146e:	2b 81       	ldd	r18, Y+3	; 0x03
    1470:	3c 81       	ldd	r19, Y+4	; 0x04
    1472:	22 30       	cpi	r18, 0x02	; 2
    1474:	31 05       	cpc	r19, r1
    1476:	2c f4       	brge	.+10     	; 0x1482 <GPIO_setupPortDirection+0x3e>
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	61 f0       	breq	.+24     	; 0x1498 <GPIO_setupPortDirection+0x54>
    1480:	1e c0       	rjmp	.+60     	; 0x14be <GPIO_setupPortDirection+0x7a>
    1482:	2b 81       	ldd	r18, Y+3	; 0x03
    1484:	3c 81       	ldd	r19, Y+4	; 0x04
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	81 f0       	breq	.+32     	; 0x14ac <GPIO_setupPortDirection+0x68>
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	83 30       	cpi	r24, 0x03	; 3
    1492:	91 05       	cpc	r25, r1
    1494:	81 f0       	breq	.+32     	; 0x14b6 <GPIO_setupPortDirection+0x72>
    1496:	13 c0       	rjmp	.+38     	; 0x14be <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1498:	ea e3       	ldi	r30, 0x3A	; 58
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	80 83       	st	Z, r24
    14a0:	0e c0       	rjmp	.+28     	; 0x14be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14a2:	e7 e3       	ldi	r30, 0x37	; 55
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	80 83       	st	Z, r24
    14aa:	09 c0       	rjmp	.+18     	; 0x14be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14ac:	e4 e3       	ldi	r30, 0x34	; 52
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	80 83       	st	Z, r24
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14b6:	e1 e3       	ldi	r30, 0x31	; 49
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <GPIO_writePort+0x6>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <GPIO_writePort+0x8>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	84 30       	cpi	r24, 0x04	; 4
    14e0:	90 f5       	brcc	.+100    	; 0x1546 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	3c 83       	std	Y+4, r19	; 0x04
    14ea:	2b 83       	std	Y+3, r18	; 0x03
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	91 05       	cpc	r25, r1
    14f4:	d1 f0       	breq	.+52     	; 0x152a <GPIO_writePort+0x5e>
    14f6:	2b 81       	ldd	r18, Y+3	; 0x03
    14f8:	3c 81       	ldd	r19, Y+4	; 0x04
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	2c f4       	brge	.+10     	; 0x150a <GPIO_writePort+0x3e>
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	61 f0       	breq	.+24     	; 0x1520 <GPIO_writePort+0x54>
    1508:	1e c0       	rjmp	.+60     	; 0x1546 <GPIO_writePort+0x7a>
    150a:	2b 81       	ldd	r18, Y+3	; 0x03
    150c:	3c 81       	ldd	r19, Y+4	; 0x04
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	81 f0       	breq	.+32     	; 0x1534 <GPIO_writePort+0x68>
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	91 05       	cpc	r25, r1
    151c:	81 f0       	breq	.+32     	; 0x153e <GPIO_writePort+0x72>
    151e:	13 c0       	rjmp	.+38     	; 0x1546 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1520:	eb e3       	ldi	r30, 0x3B	; 59
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	80 83       	st	Z, r24
    1528:	0e c0       	rjmp	.+28     	; 0x1546 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    152a:	e8 e3       	ldi	r30, 0x38	; 56
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	80 83       	st	Z, r24
    1532:	09 c0       	rjmp	.+18     	; 0x1546 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1534:	e5 e3       	ldi	r30, 0x35	; 53
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	80 83       	st	Z, r24
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    153e:	e2 e3       	ldi	r30, 0x32	; 50
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	80 83       	st	Z, r24
			break;
		}
	}
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <GPIO_readPort+0x6>
    155a:	00 d0       	rcall	.+0      	; 0x155c <GPIO_readPort+0x8>
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1562:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	90 f5       	brcc	.+100    	; 0x15ce <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	3c 83       	std	Y+4, r19	; 0x04
    1572:	2b 83       	std	Y+3, r18	; 0x03
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	91 05       	cpc	r25, r1
    157c:	d1 f0       	breq	.+52     	; 0x15b2 <GPIO_readPort+0x5e>
    157e:	2b 81       	ldd	r18, Y+3	; 0x03
    1580:	3c 81       	ldd	r19, Y+4	; 0x04
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	2c f4       	brge	.+10     	; 0x1592 <GPIO_readPort+0x3e>
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	61 f0       	breq	.+24     	; 0x15a8 <GPIO_readPort+0x54>
    1590:	1e c0       	rjmp	.+60     	; 0x15ce <GPIO_readPort+0x7a>
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	81 f0       	breq	.+32     	; 0x15bc <GPIO_readPort+0x68>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	91 05       	cpc	r25, r1
    15a4:	81 f0       	breq	.+32     	; 0x15c6 <GPIO_readPort+0x72>
    15a6:	13 c0       	rjmp	.+38     	; 0x15ce <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15a8:	e9 e3       	ldi	r30, 0x39	; 57
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	0e c0       	rjmp	.+28     	; 0x15ce <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    15b2:	e6 e3       	ldi	r30, 0x36	; 54
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    15bc:	e3 e3       	ldi	r30, 0x33	; 51
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    15c6:	e0 e3       	ldi	r30, 0x30	; 48
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    15de:	1f 92       	push	r1
    15e0:	0f 92       	push	r0
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	0f 92       	push	r0
    15e6:	11 24       	eor	r1, r1
    15e8:	2f 93       	push	r18
    15ea:	3f 93       	push	r19
    15ec:	4f 93       	push	r20
    15ee:	5f 93       	push	r21
    15f0:	6f 93       	push	r22
    15f2:	7f 93       	push	r23
    15f4:	8f 93       	push	r24
    15f6:	9f 93       	push	r25
    15f8:	af 93       	push	r26
    15fa:	bf 93       	push	r27
    15fc:	ef 93       	push	r30
    15fe:	ff 93       	push	r31
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1608:	80 91 81 00 	lds	r24, 0x0081
    160c:	90 91 82 00 	lds	r25, 0x0082
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	29 f0       	breq	.+10     	; 0x161e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1614:	e0 91 81 00 	lds	r30, 0x0081
    1618:	f0 91 82 00 	lds	r31, 0x0082
    161c:	09 95       	icall
	}
}
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	ff 91       	pop	r31
    1624:	ef 91       	pop	r30
    1626:	bf 91       	pop	r27
    1628:	af 91       	pop	r26
    162a:	9f 91       	pop	r25
    162c:	8f 91       	pop	r24
    162e:	7f 91       	pop	r23
    1630:	6f 91       	pop	r22
    1632:	5f 91       	pop	r21
    1634:	4f 91       	pop	r20
    1636:	3f 91       	pop	r19
    1638:	2f 91       	pop	r18
    163a:	0f 90       	pop	r0
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	0f 90       	pop	r0
    1640:	1f 90       	pop	r1
    1642:	18 95       	reti

00001644 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <ICU_init+0x6>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    1652:	a1 e3       	ldi	r26, 0x31	; 49
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e1 e3       	ldi	r30, 0x31	; 49
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8f 7b       	andi	r24, 0xBF	; 191
    165e:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1660:	ef e4       	ldi	r30, 0x4F	; 79
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	8c e0       	ldi	r24, 0x0C	; 12
    1666:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1668:	ae e4       	ldi	r26, 0x4E	; 78
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	ee e4       	ldi	r30, 0x4E	; 78
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	98 2f       	mov	r25, r24
    1674:	98 7f       	andi	r25, 0xF8	; 248
    1676:	e9 81       	ldd	r30, Y+1	; 0x01
    1678:	fa 81       	ldd	r31, Y+2	; 0x02
    167a:	80 81       	ld	r24, Z
    167c:	89 2b       	or	r24, r25
    167e:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    1680:	ae e4       	ldi	r26, 0x4E	; 78
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	ee e4       	ldi	r30, 0x4E	; 78
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	28 2f       	mov	r18, r24
    168c:	2f 7b       	andi	r18, 0xBF	; 191
    168e:	e9 81       	ldd	r30, Y+1	; 0x01
    1690:	fa 81       	ldd	r31, Y+2	; 0x02
    1692:	81 81       	ldd	r24, Z+1	; 0x01
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	00 24       	eor	r0, r0
    169a:	96 95       	lsr	r25
    169c:	87 95       	ror	r24
    169e:	07 94       	ror	r0
    16a0:	96 95       	lsr	r25
    16a2:	87 95       	ror	r24
    16a4:	07 94       	ror	r0
    16a6:	98 2f       	mov	r25, r24
    16a8:	80 2d       	mov	r24, r0
    16aa:	82 2b       	or	r24, r18
    16ac:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    16ae:	ec e4       	ldi	r30, 0x4C	; 76
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	11 82       	std	Z+1, r1	; 0x01
    16b4:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    16b6:	e6 e4       	ldi	r30, 0x46	; 70
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	11 82       	std	Z+1, r1	; 0x01
    16bc:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    16be:	a9 e5       	ldi	r26, 0x59	; 89
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e9 e5       	ldi	r30, 0x59	; 89
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	80 62       	ori	r24, 0x20	; 32
    16ca:	8c 93       	st	X, r24
}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <ICU_setCallBack+0x6>
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	90 93 82 00 	sts	0x0082, r25
    16ec:	80 93 81 00 	sts	0x0081, r24
}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	0f 92       	push	r0
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1706:	ae e4       	ldi	r26, 0x4E	; 78
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	ee e4       	ldi	r30, 0x4E	; 78
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	28 2f       	mov	r18, r24
    1712:	2f 7b       	andi	r18, 0xBF	; 191
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	00 24       	eor	r0, r0
    171c:	96 95       	lsr	r25
    171e:	87 95       	ror	r24
    1720:	07 94       	ror	r0
    1722:	96 95       	lsr	r25
    1724:	87 95       	ror	r24
    1726:	07 94       	ror	r0
    1728:	98 2f       	mov	r25, r24
    172a:	80 2d       	mov	r24, r0
    172c:	82 2b       	or	r24, r18
    172e:	8c 93       	st	X, r24
}
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1740:	e6 e4       	ldi	r30, 0x46	; 70
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
}
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1756:	ec e4       	ldi	r30, 0x4C	; 76
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	11 82       	std	Z+1, r1	; 0x01
    175c:	10 82       	st	Z, r1
}
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    176c:	ef e4       	ldi	r30, 0x4F	; 79
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	10 82       	st	Z, r1
	TCCR1B = 0;
    1772:	ee e4       	ldi	r30, 0x4E	; 78
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	10 82       	st	Z, r1
	TCNT1 = 0;
    1778:	ec e4       	ldi	r30, 0x4C	; 76
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	11 82       	std	Z+1, r1	; 0x01
    177e:	10 82       	st	Z, r1
	ICR1 = 0;
    1780:	e6 e4       	ldi	r30, 0x46	; 70
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	11 82       	std	Z+1, r1	; 0x01
    1786:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1788:	a9 e5       	ldi	r26, 0x59	; 89
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e9 e5       	ldi	r30, 0x59	; 89
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	8f 7d       	andi	r24, 0xDF	; 223
    1794:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1796:	10 92 82 00 	sts	0x0082, r1
    179a:	10 92 81 00 	sts	0x0081, r1
}
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	2e 97       	sbiw	r28, 0x0e	; 14
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	41 e0       	ldi	r20, 0x01	; 1
    17be:	0e 94 b1 07 	call	0xf62	; 0xf62 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	62 e0       	ldi	r22, 0x02	; 2
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	0e 94 b1 07 	call	0xf62	; 0xf62 <GPIO_setupPinDirection>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a0 ea       	ldi	r26, 0xA0	; 160
    17d2:	b1 e4       	ldi	r27, 0x41	; 65
    17d4:	8b 87       	std	Y+11, r24	; 0x0b
    17d6:	9c 87       	std	Y+12, r25	; 0x0c
    17d8:	ad 87       	std	Y+13, r26	; 0x0d
    17da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17de:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a e7       	ldi	r20, 0x7A	; 122
    17ea:	55 e4       	ldi	r21, 0x45	; 69
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	8f 83       	std	Y+7, r24	; 0x07
    17f6:	98 87       	std	Y+8, r25	; 0x08
    17f8:	a9 87       	std	Y+9, r26	; 0x09
    17fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17fc:	6f 81       	ldd	r22, Y+7	; 0x07
    17fe:	78 85       	ldd	r23, Y+8	; 0x08
    1800:	89 85       	ldd	r24, Y+9	; 0x09
    1802:	9a 85       	ldd	r25, Y+10	; 0x0a
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f e3       	ldi	r21, 0x3F	; 63
    180c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1810:	88 23       	and	r24, r24
    1812:	2c f4       	brge	.+10     	; 0x181e <LCD_init+0x7a>
		__ticks = 1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9e 83       	std	Y+6, r25	; 0x06
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	3f c0       	rjmp	.+126    	; 0x189c <LCD_init+0xf8>
	else if (__tmp > 65535)
    181e:	6f 81       	ldd	r22, Y+7	; 0x07
    1820:	78 85       	ldd	r23, Y+8	; 0x08
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	4c f5       	brge	.+82     	; 0x1888 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1836:	6b 85       	ldd	r22, Y+11	; 0x0b
    1838:	7c 85       	ldd	r23, Y+12	; 0x0c
    183a:	8d 85       	ldd	r24, Y+13	; 0x0d
    183c:	9e 85       	ldd	r25, Y+14	; 0x0e
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e2       	ldi	r20, 0x20	; 32
    1844:	51 e4       	ldi	r21, 0x41	; 65
    1846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9e 83       	std	Y+6, r25	; 0x06
    185c:	8d 83       	std	Y+5, r24	; 0x05
    185e:	0f c0       	rjmp	.+30     	; 0x187e <LCD_init+0xda>
    1860:	80 e9       	ldi	r24, 0x90	; 144
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	9c 83       	std	Y+4, r25	; 0x04
    1866:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD_init+0xc8>
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	9e 83       	std	Y+6, r25	; 0x06
    187c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	69 f7       	brne	.-38     	; 0x1860 <LCD_init+0xbc>
    1886:	14 c0       	rjmp	.+40     	; 0x18b0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1888:	6f 81       	ldd	r22, Y+7	; 0x07
    188a:	78 85       	ldd	r23, Y+8	; 0x08
    188c:	89 85       	ldd	r24, Y+9	; 0x09
    188e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	9e 83       	std	Y+6, r25	; 0x06
    189a:	8d 83       	std	Y+5, r24	; 0x05
    189c:	8d 81       	ldd	r24, Y+5	; 0x05
    189e:	9e 81       	ldd	r25, Y+6	; 0x06
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <LCD_init+0x104>
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	63 e0       	ldi	r22, 0x03	; 3
    18b4:	41 e0       	ldi	r20, 0x01	; 1
    18b6:	0e 94 b1 07 	call	0xf62	; 0xf62 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	64 e0       	ldi	r22, 0x04	; 4
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	0e 94 b1 07 	call	0xf62	; 0xf62 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	65 e0       	ldi	r22, 0x05	; 5
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	0e 94 b1 07 	call	0xf62	; 0xf62 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	66 e0       	ldi	r22, 0x06	; 6
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 b1 07 	call	0xf62	; 0xf62 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    18d8:	83 e3       	ldi	r24, 0x33	; 51
    18da:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    18de:	82 e3       	ldi	r24, 0x32	; 50
    18e0:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    18e4:	88 e2       	ldi	r24, 0x28	; 40
    18e6:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    18ea:	8c e0       	ldi	r24, 0x0C	; 12
    18ec:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_sendCommand>
}
    18f6:	2e 96       	adiw	r28, 0x0e	; 14
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	c3 56       	subi	r28, 0x63	; 99
    1916:	d0 40       	sbci	r29, 0x00	; 0
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	fe 01       	movw	r30, r28
    1924:	ed 59       	subi	r30, 0x9D	; 157
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	61 e0       	ldi	r22, 0x01	; 1
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    1934:	fe 01       	movw	r30, r28
    1936:	e1 5a       	subi	r30, 0xA1	; 161
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a0 e8       	ldi	r26, 0x80	; 128
    1940:	bf e3       	ldi	r27, 0x3F	; 63
    1942:	80 83       	st	Z, r24
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	a2 83       	std	Z+2, r26	; 0x02
    1948:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194a:	8e 01       	movw	r16, r28
    194c:	05 5a       	subi	r16, 0xA5	; 165
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	fe 01       	movw	r30, r28
    1952:	e1 5a       	subi	r30, 0xA1	; 161
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a e7       	ldi	r20, 0x7A	; 122
    1964:	55 e4       	ldi	r21, 0x45	; 69
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	f8 01       	movw	r30, r16
    1970:	80 83       	st	Z, r24
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	a2 83       	std	Z+2, r26	; 0x02
    1976:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1978:	fe 01       	movw	r30, r28
    197a:	e5 5a       	subi	r30, 0xA5	; 165
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1992:	88 23       	and	r24, r24
    1994:	44 f4       	brge	.+16     	; 0x19a6 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1996:	fe 01       	movw	r30, r28
    1998:	e7 5a       	subi	r30, 0xA7	; 167
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
    19a4:	64 c0       	rjmp	.+200    	; 0x1a6e <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    19a6:	fe 01       	movw	r30, r28
    19a8:	e5 5a       	subi	r30, 0xA5	; 165
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	3f ef       	ldi	r19, 0xFF	; 255
    19b8:	4f e7       	ldi	r20, 0x7F	; 127
    19ba:	57 e4       	ldi	r21, 0x47	; 71
    19bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19c0:	18 16       	cp	r1, r24
    19c2:	0c f0       	brlt	.+2      	; 0x19c6 <LCD_sendCommand+0xbe>
    19c4:	43 c0       	rjmp	.+134    	; 0x1a4c <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	fe 01       	movw	r30, r28
    19c8:	e1 5a       	subi	r30, 0xA1	; 161
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e2       	ldi	r20, 0x20	; 32
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	8e 01       	movw	r16, r28
    19e6:	07 5a       	subi	r16, 0xA7	; 167
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	f8 01       	movw	r30, r16
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
    19fc:	1f c0       	rjmp	.+62     	; 0x1a3c <LCD_sendCommand+0x134>
    19fe:	fe 01       	movw	r30, r28
    1a00:	e9 5a       	subi	r30, 0xA9	; 169
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	80 e9       	ldi	r24, 0x90	; 144
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	91 83       	std	Z+1, r25	; 0x01
    1a0a:	80 83       	st	Z, r24
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e9 5a       	subi	r30, 0xA9	; 169
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <LCD_sendCommand+0x10e>
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e9 5a       	subi	r30, 0xA9	; 169
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	de 01       	movw	r26, r28
    1a26:	a7 5a       	subi	r26, 0xA7	; 167
    1a28:	bf 4f       	sbci	r27, 0xFF	; 255
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e7 5a       	subi	r30, 0xA7	; 167
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	11 96       	adiw	r26, 0x01	; 1
    1a38:	9c 93       	st	X, r25
    1a3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e7 5a       	subi	r30, 0xA7	; 167
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 81       	ld	r24, Z
    1a44:	91 81       	ldd	r25, Z+1	; 0x01
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	d1 f6       	brne	.-76     	; 0x19fe <LCD_sendCommand+0xf6>
    1a4a:	27 c0       	rjmp	.+78     	; 0x1a9a <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4c:	8e 01       	movw	r16, r28
    1a4e:	07 5a       	subi	r16, 0xA7	; 167
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	fe 01       	movw	r30, r28
    1a54:	e5 5a       	subi	r30, 0xA5	; 165
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	f8 01       	movw	r30, r16
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	80 83       	st	Z, r24
    1a6e:	de 01       	movw	r26, r28
    1a70:	ab 5a       	subi	r26, 0xAB	; 171
    1a72:	bf 4f       	sbci	r27, 0xFF	; 255
    1a74:	fe 01       	movw	r30, r28
    1a76:	e7 5a       	subi	r30, 0xA7	; 167
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	8d 93       	st	X+, r24
    1a80:	9c 93       	st	X, r25
    1a82:	fe 01       	movw	r30, r28
    1a84:	eb 5a       	subi	r30, 0xAB	; 171
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	91 81       	ldd	r25, Z+1	; 0x01
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_sendCommand+0x184>
    1a90:	fe 01       	movw	r30, r28
    1a92:	eb 5a       	subi	r30, 0xAB	; 171
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	62 e0       	ldi	r22, 0x02	; 2
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	ef 5a       	subi	r30, 0xAF	; 175
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a0 e8       	ldi	r26, 0x80	; 128
    1ab0:	bf e3       	ldi	r27, 0x3F	; 63
    1ab2:	80 83       	st	Z, r24
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	a2 83       	std	Z+2, r26	; 0x02
    1ab8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aba:	8e 01       	movw	r16, r28
    1abc:	03 5b       	subi	r16, 0xB3	; 179
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	ef 5a       	subi	r30, 0xAF	; 175
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	60 81       	ld	r22, Z
    1ac8:	71 81       	ldd	r23, Z+1	; 0x01
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	93 81       	ldd	r25, Z+3	; 0x03
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4a e7       	ldi	r20, 0x7A	; 122
    1ad4:	55 e4       	ldi	r21, 0x45	; 69
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	f8 01       	movw	r30, r16
    1ae0:	80 83       	st	Z, r24
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	a2 83       	std	Z+2, r26	; 0x02
    1ae6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ae8:	fe 01       	movw	r30, r28
    1aea:	e3 5b       	subi	r30, 0xB3	; 179
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	60 81       	ld	r22, Z
    1af0:	71 81       	ldd	r23, Z+1	; 0x01
    1af2:	82 81       	ldd	r24, Z+2	; 0x02
    1af4:	93 81       	ldd	r25, Z+3	; 0x03
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e8       	ldi	r20, 0x80	; 128
    1afc:	5f e3       	ldi	r21, 0x3F	; 63
    1afe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b02:	88 23       	and	r24, r24
    1b04:	44 f4       	brge	.+16     	; 0x1b16 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1b06:	fe 01       	movw	r30, r28
    1b08:	e5 5b       	subi	r30, 0xB5	; 181
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	91 83       	std	Z+1, r25	; 0x01
    1b12:	80 83       	st	Z, r24
    1b14:	64 c0       	rjmp	.+200    	; 0x1bde <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1b16:	fe 01       	movw	r30, r28
    1b18:	e3 5b       	subi	r30, 0xB3	; 179
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	60 81       	ld	r22, Z
    1b1e:	71 81       	ldd	r23, Z+1	; 0x01
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b30:	18 16       	cp	r1, r24
    1b32:	0c f0       	brlt	.+2      	; 0x1b36 <LCD_sendCommand+0x22e>
    1b34:	43 c0       	rjmp	.+134    	; 0x1bbc <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	fe 01       	movw	r30, r28
    1b38:	ef 5a       	subi	r30, 0xAF	; 175
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	60 81       	ld	r22, Z
    1b3e:	71 81       	ldd	r23, Z+1	; 0x01
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e2       	ldi	r20, 0x20	; 32
    1b4a:	51 e4       	ldi	r21, 0x41	; 65
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8e 01       	movw	r16, r28
    1b56:	05 5b       	subi	r16, 0xB5	; 181
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	f8 01       	movw	r30, r16
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
    1b6c:	1f c0       	rjmp	.+62     	; 0x1bac <LCD_sendCommand+0x2a4>
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e7 5b       	subi	r30, 0xB7	; 183
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	80 e9       	ldi	r24, 0x90	; 144
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	80 83       	st	Z, r24
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e7 5b       	subi	r30, 0xB7	; 183
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	80 81       	ld	r24, Z
    1b84:	91 81       	ldd	r25, Z+1	; 0x01
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_sendCommand+0x27e>
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	e7 5b       	subi	r30, 0xB7	; 183
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b94:	de 01       	movw	r26, r28
    1b96:	a5 5b       	subi	r26, 0xB5	; 181
    1b98:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e5 5b       	subi	r30, 0xB5	; 181
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	11 96       	adiw	r26, 0x01	; 1
    1ba8:	9c 93       	st	X, r25
    1baa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bac:	fe 01       	movw	r30, r28
    1bae:	e5 5b       	subi	r30, 0xB5	; 181
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	91 81       	ldd	r25, Z+1	; 0x01
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	d1 f6       	brne	.-76     	; 0x1b6e <LCD_sendCommand+0x266>
    1bba:	27 c0       	rjmp	.+78     	; 0x1c0a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbc:	8e 01       	movw	r16, r28
    1bbe:	05 5b       	subi	r16, 0xB5	; 181
    1bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	e3 5b       	subi	r30, 0xB3	; 179
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	f8 01       	movw	r30, r16
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
    1bde:	de 01       	movw	r26, r28
    1be0:	a9 5b       	subi	r26, 0xB9	; 185
    1be2:	bf 4f       	sbci	r27, 0xFF	; 255
    1be4:	fe 01       	movw	r30, r28
    1be6:	e5 5b       	subi	r30, 0xB5	; 181
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	8d 93       	st	X+, r24
    1bf0:	9c 93       	st	X, r25
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e9 5b       	subi	r30, 0xB9	; 185
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD_sendCommand+0x2f4>
    1c00:	fe 01       	movw	r30, r28
    1c02:	e9 5b       	subi	r30, 0xB9	; 185
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	ed 59       	subi	r30, 0x9D	; 157
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 81       	ld	r24, Z
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	80 71       	andi	r24, 0x10	; 16
    1c18:	90 70       	andi	r25, 0x00	; 0
    1c1a:	95 95       	asr	r25
    1c1c:	87 95       	ror	r24
    1c1e:	95 95       	asr	r25
    1c20:	87 95       	ror	r24
    1c22:	95 95       	asr	r25
    1c24:	87 95       	ror	r24
    1c26:	95 95       	asr	r25
    1c28:	87 95       	ror	r24
    1c2a:	98 2f       	mov	r25, r24
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	63 e0       	ldi	r22, 0x03	; 3
    1c30:	49 2f       	mov	r20, r25
    1c32:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1c36:	fe 01       	movw	r30, r28
    1c38:	ed 59       	subi	r30, 0x9D	; 157
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 81       	ld	r24, Z
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	80 72       	andi	r24, 0x20	; 32
    1c44:	90 70       	andi	r25, 0x00	; 0
    1c46:	95 95       	asr	r25
    1c48:	87 95       	ror	r24
    1c4a:	95 95       	asr	r25
    1c4c:	87 95       	ror	r24
    1c4e:	95 95       	asr	r25
    1c50:	87 95       	ror	r24
    1c52:	95 95       	asr	r25
    1c54:	87 95       	ror	r24
    1c56:	95 95       	asr	r25
    1c58:	87 95       	ror	r24
    1c5a:	98 2f       	mov	r25, r24
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	64 e0       	ldi	r22, 0x04	; 4
    1c60:	49 2f       	mov	r20, r25
    1c62:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1c66:	fe 01       	movw	r30, r28
    1c68:	ed 59       	subi	r30, 0x9D	; 157
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 81       	ld	r24, Z
    1c6e:	88 2f       	mov	r24, r24
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	80 74       	andi	r24, 0x40	; 64
    1c74:	90 70       	andi	r25, 0x00	; 0
    1c76:	08 2e       	mov	r0, r24
    1c78:	89 2f       	mov	r24, r25
    1c7a:	00 0c       	add	r0, r0
    1c7c:	88 1f       	adc	r24, r24
    1c7e:	99 0b       	sbc	r25, r25
    1c80:	00 0c       	add	r0, r0
    1c82:	88 1f       	adc	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	98 2f       	mov	r25, r24
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	65 e0       	ldi	r22, 0x05	; 5
    1c8c:	49 2f       	mov	r20, r25
    1c8e:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1c92:	fe 01       	movw	r30, r28
    1c94:	ed 59       	subi	r30, 0x9D	; 157
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	98 2f       	mov	r25, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	99 27       	eor	r25, r25
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	66 e0       	ldi	r22, 0x06	; 6
    1ca6:	49 2f       	mov	r20, r25
    1ca8:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    1cac:	fe 01       	movw	r30, r28
    1cae:	ed 5b       	subi	r30, 0xBD	; 189
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	a0 e8       	ldi	r26, 0x80	; 128
    1cb8:	bf e3       	ldi	r27, 0x3F	; 63
    1cba:	80 83       	st	Z, r24
    1cbc:	91 83       	std	Z+1, r25	; 0x01
    1cbe:	a2 83       	std	Z+2, r26	; 0x02
    1cc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc2:	8e 01       	movw	r16, r28
    1cc4:	01 5c       	subi	r16, 0xC1	; 193
    1cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc8:	fe 01       	movw	r30, r28
    1cca:	ed 5b       	subi	r30, 0xBD	; 189
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	60 81       	ld	r22, Z
    1cd0:	71 81       	ldd	r23, Z+1	; 0x01
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	93 81       	ldd	r25, Z+3	; 0x03
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a e7       	ldi	r20, 0x7A	; 122
    1cdc:	55 e4       	ldi	r21, 0x45	; 69
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	80 83       	st	Z, r24
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	a2 83       	std	Z+2, r26	; 0x02
    1cee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	ff 96       	adiw	r30, 0x3f	; 63
    1cf4:	60 81       	ld	r22, Z
    1cf6:	71 81       	ldd	r23, Z+1	; 0x01
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	93 81       	ldd	r25, Z+3	; 0x03
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e8       	ldi	r20, 0x80	; 128
    1d02:	5f e3       	ldi	r21, 0x3F	; 63
    1d04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d08:	88 23       	and	r24, r24
    1d0a:	2c f4       	brge	.+10     	; 0x1d16 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9e af       	std	Y+62, r25	; 0x3e
    1d12:	8d af       	std	Y+61, r24	; 0x3d
    1d14:	46 c0       	rjmp	.+140    	; 0x1da2 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1d16:	fe 01       	movw	r30, r28
    1d18:	ff 96       	adiw	r30, 0x3f	; 63
    1d1a:	60 81       	ld	r22, Z
    1d1c:	71 81       	ldd	r23, Z+1	; 0x01
    1d1e:	82 81       	ldd	r24, Z+2	; 0x02
    1d20:	93 81       	ldd	r25, Z+3	; 0x03
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	3f ef       	ldi	r19, 0xFF	; 255
    1d26:	4f e7       	ldi	r20, 0x7F	; 127
    1d28:	57 e4       	ldi	r21, 0x47	; 71
    1d2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	64 f5       	brge	.+88     	; 0x1d8a <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d32:	fe 01       	movw	r30, r28
    1d34:	ed 5b       	subi	r30, 0xBD	; 189
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	60 81       	ld	r22, Z
    1d3a:	71 81       	ldd	r23, Z+1	; 0x01
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e2       	ldi	r20, 0x20	; 32
    1d46:	51 e4       	ldi	r21, 0x41	; 65
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9e af       	std	Y+62, r25	; 0x3e
    1d5e:	8d af       	std	Y+61, r24	; 0x3d
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <LCD_sendCommand+0x478>
    1d62:	80 e9       	ldi	r24, 0x90	; 144
    1d64:	91 e0       	ldi	r25, 0x01	; 1
    1d66:	9c af       	std	Y+60, r25	; 0x3c
    1d68:	8b af       	std	Y+59, r24	; 0x3b
    1d6a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d6c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_sendCommand+0x466>
    1d72:	9c af       	std	Y+60, r25	; 0x3c
    1d74:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d76:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d78:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	9e af       	std	Y+62, r25	; 0x3e
    1d7e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d80:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d82:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	69 f7       	brne	.-38     	; 0x1d62 <LCD_sendCommand+0x45a>
    1d88:	16 c0       	rjmp	.+44     	; 0x1db6 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	ff 96       	adiw	r30, 0x3f	; 63
    1d8e:	60 81       	ld	r22, Z
    1d90:	71 81       	ldd	r23, Z+1	; 0x01
    1d92:	82 81       	ldd	r24, Z+2	; 0x02
    1d94:	93 81       	ldd	r25, Z+3	; 0x03
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9e af       	std	Y+62, r25	; 0x3e
    1da0:	8d af       	std	Y+61, r24	; 0x3d
    1da2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1da4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1da6:	9a af       	std	Y+58, r25	; 0x3a
    1da8:	89 af       	std	Y+57, r24	; 0x39
    1daa:	89 ad       	ldd	r24, Y+57	; 0x39
    1dac:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_sendCommand+0x4a6>
    1db2:	9a af       	std	Y+58, r25	; 0x3a
    1db4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	62 e0       	ldi	r22, 0x02	; 2
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a0 e8       	ldi	r26, 0x80	; 128
    1dc6:	bf e3       	ldi	r27, 0x3F	; 63
    1dc8:	8d ab       	std	Y+53, r24	; 0x35
    1dca:	9e ab       	std	Y+54, r25	; 0x36
    1dcc:	af ab       	std	Y+55, r26	; 0x37
    1dce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd0:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd2:	7e a9       	ldd	r23, Y+54	; 0x36
    1dd4:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd6:	98 ad       	ldd	r25, Y+56	; 0x38
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	4a e7       	ldi	r20, 0x7A	; 122
    1dde:	55 e4       	ldi	r21, 0x45	; 69
    1de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	89 ab       	std	Y+49, r24	; 0x31
    1dea:	9a ab       	std	Y+50, r25	; 0x32
    1dec:	ab ab       	std	Y+51, r26	; 0x33
    1dee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1df0:	69 a9       	ldd	r22, Y+49	; 0x31
    1df2:	7a a9       	ldd	r23, Y+50	; 0x32
    1df4:	8b a9       	ldd	r24, Y+51	; 0x33
    1df6:	9c a9       	ldd	r25, Y+52	; 0x34
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e8       	ldi	r20, 0x80	; 128
    1dfe:	5f e3       	ldi	r21, 0x3F	; 63
    1e00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e04:	88 23       	and	r24, r24
    1e06:	2c f4       	brge	.+10     	; 0x1e12 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	98 ab       	std	Y+48, r25	; 0x30
    1e0e:	8f a7       	std	Y+47, r24	; 0x2f
    1e10:	3f c0       	rjmp	.+126    	; 0x1e90 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1e12:	69 a9       	ldd	r22, Y+49	; 0x31
    1e14:	7a a9       	ldd	r23, Y+50	; 0x32
    1e16:	8b a9       	ldd	r24, Y+51	; 0x33
    1e18:	9c a9       	ldd	r25, Y+52	; 0x34
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	3f ef       	ldi	r19, 0xFF	; 255
    1e1e:	4f e7       	ldi	r20, 0x7F	; 127
    1e20:	57 e4       	ldi	r21, 0x47	; 71
    1e22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e26:	18 16       	cp	r1, r24
    1e28:	4c f5       	brge	.+82     	; 0x1e7c <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e2c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e2e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e30:	98 ad       	ldd	r25, Y+56	; 0x38
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e2       	ldi	r20, 0x20	; 32
    1e38:	51 e4       	ldi	r21, 0x41	; 65
    1e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	bc 01       	movw	r22, r24
    1e44:	cd 01       	movw	r24, r26
    1e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	98 ab       	std	Y+48, r25	; 0x30
    1e50:	8f a7       	std	Y+47, r24	; 0x2f
    1e52:	0f c0       	rjmp	.+30     	; 0x1e72 <LCD_sendCommand+0x56a>
    1e54:	80 e9       	ldi	r24, 0x90	; 144
    1e56:	91 e0       	ldi	r25, 0x01	; 1
    1e58:	9e a7       	std	Y+46, r25	; 0x2e
    1e5a:	8d a7       	std	Y+45, r24	; 0x2d
    1e5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <LCD_sendCommand+0x558>
    1e64:	9e a7       	std	Y+46, r25	; 0x2e
    1e66:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	98 ab       	std	Y+48, r25	; 0x30
    1e70:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e74:	98 a9       	ldd	r25, Y+48	; 0x30
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	69 f7       	brne	.-38     	; 0x1e54 <LCD_sendCommand+0x54c>
    1e7a:	14 c0       	rjmp	.+40     	; 0x1ea4 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e80:	8b a9       	ldd	r24, Y+51	; 0x33
    1e82:	9c a9       	ldd	r25, Y+52	; 0x34
    1e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	98 ab       	std	Y+48, r25	; 0x30
    1e8e:	8f a7       	std	Y+47, r24	; 0x2f
    1e90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e92:	98 a9       	ldd	r25, Y+48	; 0x30
    1e94:	9c a7       	std	Y+44, r25	; 0x2c
    1e96:	8b a7       	std	Y+43, r24	; 0x2b
    1e98:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <LCD_sendCommand+0x594>
    1ea0:	9c a7       	std	Y+44, r25	; 0x2c
    1ea2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	62 e0       	ldi	r22, 0x02	; 2
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a0 e8       	ldi	r26, 0x80	; 128
    1eb4:	bf e3       	ldi	r27, 0x3F	; 63
    1eb6:	8f a3       	std	Y+39, r24	; 0x27
    1eb8:	98 a7       	std	Y+40, r25	; 0x28
    1eba:	a9 a7       	std	Y+41, r26	; 0x29
    1ebc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebe:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	4a e7       	ldi	r20, 0x7A	; 122
    1ecc:	55 e4       	ldi	r21, 0x45	; 69
    1ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	8b a3       	std	Y+35, r24	; 0x23
    1ed8:	9c a3       	std	Y+36, r25	; 0x24
    1eda:	ad a3       	std	Y+37, r26	; 0x25
    1edc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ede:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e8       	ldi	r20, 0x80	; 128
    1eec:	5f e3       	ldi	r21, 0x3F	; 63
    1eee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef2:	88 23       	and	r24, r24
    1ef4:	2c f4       	brge	.+10     	; 0x1f00 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9a a3       	std	Y+34, r25	; 0x22
    1efc:	89 a3       	std	Y+33, r24	; 0x21
    1efe:	3f c0       	rjmp	.+126    	; 0x1f7e <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1f00:	6b a1       	ldd	r22, Y+35	; 0x23
    1f02:	7c a1       	ldd	r23, Y+36	; 0x24
    1f04:	8d a1       	ldd	r24, Y+37	; 0x25
    1f06:	9e a1       	ldd	r25, Y+38	; 0x26
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	3f ef       	ldi	r19, 0xFF	; 255
    1f0c:	4f e7       	ldi	r20, 0x7F	; 127
    1f0e:	57 e4       	ldi	r21, 0x47	; 71
    1f10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f14:	18 16       	cp	r1, r24
    1f16:	4c f5       	brge	.+82     	; 0x1f6a <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f18:	6f a1       	ldd	r22, Y+39	; 0x27
    1f1a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f1c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e2       	ldi	r20, 0x20	; 32
    1f26:	51 e4       	ldi	r21, 0x41	; 65
    1f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9a a3       	std	Y+34, r25	; 0x22
    1f3e:	89 a3       	std	Y+33, r24	; 0x21
    1f40:	0f c0       	rjmp	.+30     	; 0x1f60 <LCD_sendCommand+0x658>
    1f42:	80 e9       	ldi	r24, 0x90	; 144
    1f44:	91 e0       	ldi	r25, 0x01	; 1
    1f46:	98 a3       	std	Y+32, r25	; 0x20
    1f48:	8f 8f       	std	Y+31, r24	; 0x1f
    1f4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f4c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <LCD_sendCommand+0x646>
    1f52:	98 a3       	std	Y+32, r25	; 0x20
    1f54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f56:	89 a1       	ldd	r24, Y+33	; 0x21
    1f58:	9a a1       	ldd	r25, Y+34	; 0x22
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	9a a3       	std	Y+34, r25	; 0x22
    1f5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f60:	89 a1       	ldd	r24, Y+33	; 0x21
    1f62:	9a a1       	ldd	r25, Y+34	; 0x22
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	69 f7       	brne	.-38     	; 0x1f42 <LCD_sendCommand+0x63a>
    1f68:	14 c0       	rjmp	.+40     	; 0x1f92 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f70:	9e a1       	ldd	r25, Y+38	; 0x26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9a a3       	std	Y+34, r25	; 0x22
    1f7c:	89 a3       	std	Y+33, r24	; 0x21
    1f7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f80:	9a a1       	ldd	r25, Y+34	; 0x22
    1f82:	9e 8f       	std	Y+30, r25	; 0x1e
    1f84:	8d 8f       	std	Y+29, r24	; 0x1d
    1f86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_sendCommand+0x682>
    1f8e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f90:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1f92:	fe 01       	movw	r30, r28
    1f94:	ed 59       	subi	r30, 0x9D	; 157
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
    1f9a:	98 2f       	mov	r25, r24
    1f9c:	91 70       	andi	r25, 0x01	; 1
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	63 e0       	ldi	r22, 0x03	; 3
    1fa2:	49 2f       	mov	r20, r25
    1fa4:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1fa8:	fe 01       	movw	r30, r28
    1faa:	ed 59       	subi	r30, 0x9D	; 157
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	80 81       	ld	r24, Z
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	82 70       	andi	r24, 0x02	; 2
    1fb6:	90 70       	andi	r25, 0x00	; 0
    1fb8:	95 95       	asr	r25
    1fba:	87 95       	ror	r24
    1fbc:	98 2f       	mov	r25, r24
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	64 e0       	ldi	r22, 0x04	; 4
    1fc2:	49 2f       	mov	r20, r25
    1fc4:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1fc8:	fe 01       	movw	r30, r28
    1fca:	ed 59       	subi	r30, 0x9D	; 157
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 81       	ld	r24, Z
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	84 70       	andi	r24, 0x04	; 4
    1fd6:	90 70       	andi	r25, 0x00	; 0
    1fd8:	95 95       	asr	r25
    1fda:	87 95       	ror	r24
    1fdc:	95 95       	asr	r25
    1fde:	87 95       	ror	r24
    1fe0:	98 2f       	mov	r25, r24
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	65 e0       	ldi	r22, 0x05	; 5
    1fe6:	49 2f       	mov	r20, r25
    1fe8:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1fec:	fe 01       	movw	r30, r28
    1fee:	ed 59       	subi	r30, 0x9D	; 157
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 81       	ld	r24, Z
    1ff4:	88 2f       	mov	r24, r24
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	88 70       	andi	r24, 0x08	; 8
    1ffa:	90 70       	andi	r25, 0x00	; 0
    1ffc:	95 95       	asr	r25
    1ffe:	87 95       	ror	r24
    2000:	95 95       	asr	r25
    2002:	87 95       	ror	r24
    2004:	95 95       	asr	r25
    2006:	87 95       	ror	r24
    2008:	98 2f       	mov	r25, r24
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	66 e0       	ldi	r22, 0x06	; 6
    200e:	49 2f       	mov	r20, r25
    2010:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a0 e8       	ldi	r26, 0x80	; 128
    201a:	bf e3       	ldi	r27, 0x3F	; 63
    201c:	89 8f       	std	Y+25, r24	; 0x19
    201e:	9a 8f       	std	Y+26, r25	; 0x1a
    2020:	ab 8f       	std	Y+27, r26	; 0x1b
    2022:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2024:	69 8d       	ldd	r22, Y+25	; 0x19
    2026:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2028:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	4a e7       	ldi	r20, 0x7A	; 122
    2032:	55 e4       	ldi	r21, 0x45	; 69
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	8d 8b       	std	Y+21, r24	; 0x15
    203e:	9e 8b       	std	Y+22, r25	; 0x16
    2040:	af 8b       	std	Y+23, r26	; 0x17
    2042:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2044:	6d 89       	ldd	r22, Y+21	; 0x15
    2046:	7e 89       	ldd	r23, Y+22	; 0x16
    2048:	8f 89       	ldd	r24, Y+23	; 0x17
    204a:	98 8d       	ldd	r25, Y+24	; 0x18
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e8       	ldi	r20, 0x80	; 128
    2052:	5f e3       	ldi	r21, 0x3F	; 63
    2054:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2058:	88 23       	and	r24, r24
    205a:	2c f4       	brge	.+10     	; 0x2066 <LCD_sendCommand+0x75e>
		__ticks = 1;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c 8b       	std	Y+20, r25	; 0x14
    2062:	8b 8b       	std	Y+19, r24	; 0x13
    2064:	3f c0       	rjmp	.+126    	; 0x20e4 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2066:	6d 89       	ldd	r22, Y+21	; 0x15
    2068:	7e 89       	ldd	r23, Y+22	; 0x16
    206a:	8f 89       	ldd	r24, Y+23	; 0x17
    206c:	98 8d       	ldd	r25, Y+24	; 0x18
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	3f ef       	ldi	r19, 0xFF	; 255
    2072:	4f e7       	ldi	r20, 0x7F	; 127
    2074:	57 e4       	ldi	r21, 0x47	; 71
    2076:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    207a:	18 16       	cp	r1, r24
    207c:	4c f5       	brge	.+82     	; 0x20d0 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207e:	69 8d       	ldd	r22, Y+25	; 0x19
    2080:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2082:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2084:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e2       	ldi	r20, 0x20	; 32
    208c:	51 e4       	ldi	r21, 0x41	; 65
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	9c 8b       	std	Y+20, r25	; 0x14
    20a4:	8b 8b       	std	Y+19, r24	; 0x13
    20a6:	0f c0       	rjmp	.+30     	; 0x20c6 <LCD_sendCommand+0x7be>
    20a8:	80 e9       	ldi	r24, 0x90	; 144
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	9a 8b       	std	Y+18, r25	; 0x12
    20ae:	89 8b       	std	Y+17, r24	; 0x11
    20b0:	89 89       	ldd	r24, Y+17	; 0x11
    20b2:	9a 89       	ldd	r25, Y+18	; 0x12
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <LCD_sendCommand+0x7ac>
    20b8:	9a 8b       	std	Y+18, r25	; 0x12
    20ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20bc:	8b 89       	ldd	r24, Y+19	; 0x13
    20be:	9c 89       	ldd	r25, Y+20	; 0x14
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	9c 8b       	std	Y+20, r25	; 0x14
    20c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c6:	8b 89       	ldd	r24, Y+19	; 0x13
    20c8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	69 f7       	brne	.-38     	; 0x20a8 <LCD_sendCommand+0x7a0>
    20ce:	14 c0       	rjmp	.+40     	; 0x20f8 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d0:	6d 89       	ldd	r22, Y+21	; 0x15
    20d2:	7e 89       	ldd	r23, Y+22	; 0x16
    20d4:	8f 89       	ldd	r24, Y+23	; 0x17
    20d6:	98 8d       	ldd	r25, Y+24	; 0x18
    20d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9c 8b       	std	Y+20, r25	; 0x14
    20e2:	8b 8b       	std	Y+19, r24	; 0x13
    20e4:	8b 89       	ldd	r24, Y+19	; 0x13
    20e6:	9c 89       	ldd	r25, Y+20	; 0x14
    20e8:	98 8b       	std	Y+16, r25	; 0x10
    20ea:	8f 87       	std	Y+15, r24	; 0x0f
    20ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ee:	98 89       	ldd	r25, Y+16	; 0x10
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <LCD_sendCommand+0x7e8>
    20f4:	98 8b       	std	Y+16, r25	; 0x10
    20f6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	62 e0       	ldi	r22, 0x02	; 2
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e8       	ldi	r26, 0x80	; 128
    2108:	bf e3       	ldi	r27, 0x3F	; 63
    210a:	8b 87       	std	Y+11, r24	; 0x0b
    210c:	9c 87       	std	Y+12, r25	; 0x0c
    210e:	ad 87       	std	Y+13, r26	; 0x0d
    2110:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	6b 85       	ldd	r22, Y+11	; 0x0b
    2114:	7c 85       	ldd	r23, Y+12	; 0x0c
    2116:	8d 85       	ldd	r24, Y+13	; 0x0d
    2118:	9e 85       	ldd	r25, Y+14	; 0x0e
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a e7       	ldi	r20, 0x7A	; 122
    2120:	55 e4       	ldi	r21, 0x45	; 69
    2122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	8f 83       	std	Y+7, r24	; 0x07
    212c:	98 87       	std	Y+8, r25	; 0x08
    212e:	a9 87       	std	Y+9, r26	; 0x09
    2130:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2132:	6f 81       	ldd	r22, Y+7	; 0x07
    2134:	78 85       	ldd	r23, Y+8	; 0x08
    2136:	89 85       	ldd	r24, Y+9	; 0x09
    2138:	9a 85       	ldd	r25, Y+10	; 0x0a
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2146:	88 23       	and	r24, r24
    2148:	2c f4       	brge	.+10     	; 0x2154 <LCD_sendCommand+0x84c>
		__ticks = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2154:	6f 81       	ldd	r22, Y+7	; 0x07
    2156:	78 85       	ldd	r23, Y+8	; 0x08
    2158:	89 85       	ldd	r24, Y+9	; 0x09
    215a:	9a 85       	ldd	r25, Y+10	; 0x0a
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	3f ef       	ldi	r19, 0xFF	; 255
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	57 e4       	ldi	r21, 0x47	; 71
    2164:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2168:	18 16       	cp	r1, r24
    216a:	4c f5       	brge	.+82     	; 0x21be <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	6b 85       	ldd	r22, Y+11	; 0x0b
    216e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2170:	8d 85       	ldd	r24, Y+13	; 0x0d
    2172:	9e 85       	ldd	r25, Y+14	; 0x0e
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <LCD_sendCommand+0x8ac>
    2196:	80 e9       	ldi	r24, 0x90	; 144
    2198:	91 e0       	ldi	r25, 0x01	; 1
    219a:	9c 83       	std	Y+4, r25	; 0x04
    219c:	8b 83       	std	Y+3, r24	; 0x03
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	9c 81       	ldd	r25, Y+4	; 0x04
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <LCD_sendCommand+0x89a>
    21a6:	9c 83       	std	Y+4, r25	; 0x04
    21a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	9e 83       	std	Y+6, r25	; 0x06
    21b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	8d 81       	ldd	r24, Y+5	; 0x05
    21b6:	9e 81       	ldd	r25, Y+6	; 0x06
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	69 f7       	brne	.-38     	; 0x2196 <LCD_sendCommand+0x88e>
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_sendCommand+0x8d6>
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21e6:	cd 59       	subi	r28, 0x9D	; 157
    21e8:	df 4f       	sbci	r29, 0xFF	; 255
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	1f 91       	pop	r17
    21fa:	0f 91       	pop	r16
    21fc:	08 95       	ret

000021fe <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	c3 56       	subi	r28, 0x63	; 99
    220c:	d0 40       	sbci	r29, 0x00	; 0
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	fe 01       	movw	r30, r28
    221a:	ed 59       	subi	r30, 0x9D	; 157
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	61 e0       	ldi	r22, 0x01	; 1
    2224:	41 e0       	ldi	r20, 0x01	; 1
    2226:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    222a:	fe 01       	movw	r30, r28
    222c:	e1 5a       	subi	r30, 0xA1	; 161
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	a0 e8       	ldi	r26, 0x80	; 128
    2236:	bf e3       	ldi	r27, 0x3F	; 63
    2238:	80 83       	st	Z, r24
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	a2 83       	std	Z+2, r26	; 0x02
    223e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2240:	8e 01       	movw	r16, r28
    2242:	05 5a       	subi	r16, 0xA5	; 165
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	fe 01       	movw	r30, r28
    2248:	e1 5a       	subi	r30, 0xA1	; 161
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	60 81       	ld	r22, Z
    224e:	71 81       	ldd	r23, Z+1	; 0x01
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	93 81       	ldd	r25, Z+3	; 0x03
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	4a e7       	ldi	r20, 0x7A	; 122
    225a:	55 e4       	ldi	r21, 0x45	; 69
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	f8 01       	movw	r30, r16
    2266:	80 83       	st	Z, r24
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	a2 83       	std	Z+2, r26	; 0x02
    226c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    226e:	fe 01       	movw	r30, r28
    2270:	e5 5a       	subi	r30, 0xA5	; 165
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	60 81       	ld	r22, Z
    2276:	71 81       	ldd	r23, Z+1	; 0x01
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	93 81       	ldd	r25, Z+3	; 0x03
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	44 f4       	brge	.+16     	; 0x229c <LCD_displayCharacter+0x9e>
		__ticks = 1;
    228c:	fe 01       	movw	r30, r28
    228e:	e7 5a       	subi	r30, 0xA7	; 167
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	80 83       	st	Z, r24
    229a:	64 c0       	rjmp	.+200    	; 0x2364 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    229c:	fe 01       	movw	r30, r28
    229e:	e5 5a       	subi	r30, 0xA5	; 165
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	3f ef       	ldi	r19, 0xFF	; 255
    22ae:	4f e7       	ldi	r20, 0x7F	; 127
    22b0:	57 e4       	ldi	r21, 0x47	; 71
    22b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b6:	18 16       	cp	r1, r24
    22b8:	0c f0       	brlt	.+2      	; 0x22bc <LCD_displayCharacter+0xbe>
    22ba:	43 c0       	rjmp	.+134    	; 0x2342 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22bc:	fe 01       	movw	r30, r28
    22be:	e1 5a       	subi	r30, 0xA1	; 161
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e2       	ldi	r20, 0x20	; 32
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	8e 01       	movw	r16, r28
    22dc:	07 5a       	subi	r16, 0xA7	; 167
    22de:	1f 4f       	sbci	r17, 0xFF	; 255
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	f8 01       	movw	r30, r16
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	80 83       	st	Z, r24
    22f2:	1f c0       	rjmp	.+62     	; 0x2332 <LCD_displayCharacter+0x134>
    22f4:	fe 01       	movw	r30, r28
    22f6:	e9 5a       	subi	r30, 0xA9	; 169
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	80 e9       	ldi	r24, 0x90	; 144
    22fc:	91 e0       	ldi	r25, 0x01	; 1
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	80 83       	st	Z, r24
    2302:	fe 01       	movw	r30, r28
    2304:	e9 5a       	subi	r30, 0xA9	; 169
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <LCD_displayCharacter+0x10e>
    2310:	fe 01       	movw	r30, r28
    2312:	e9 5a       	subi	r30, 0xA9	; 169
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	91 83       	std	Z+1, r25	; 0x01
    2318:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231a:	de 01       	movw	r26, r28
    231c:	a7 5a       	subi	r26, 0xA7	; 167
    231e:	bf 4f       	sbci	r27, 0xFF	; 255
    2320:	fe 01       	movw	r30, r28
    2322:	e7 5a       	subi	r30, 0xA7	; 167
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	11 96       	adiw	r26, 0x01	; 1
    232e:	9c 93       	st	X, r25
    2330:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2332:	fe 01       	movw	r30, r28
    2334:	e7 5a       	subi	r30, 0xA7	; 167
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	d1 f6       	brne	.-76     	; 0x22f4 <LCD_displayCharacter+0xf6>
    2340:	27 c0       	rjmp	.+78     	; 0x2390 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2342:	8e 01       	movw	r16, r28
    2344:	07 5a       	subi	r16, 0xA7	; 167
    2346:	1f 4f       	sbci	r17, 0xFF	; 255
    2348:	fe 01       	movw	r30, r28
    234a:	e5 5a       	subi	r30, 0xA5	; 165
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	60 81       	ld	r22, Z
    2350:	71 81       	ldd	r23, Z+1	; 0x01
    2352:	82 81       	ldd	r24, Z+2	; 0x02
    2354:	93 81       	ldd	r25, Z+3	; 0x03
    2356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	f8 01       	movw	r30, r16
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	80 83       	st	Z, r24
    2364:	de 01       	movw	r26, r28
    2366:	ab 5a       	subi	r26, 0xAB	; 171
    2368:	bf 4f       	sbci	r27, 0xFF	; 255
    236a:	fe 01       	movw	r30, r28
    236c:	e7 5a       	subi	r30, 0xA7	; 167
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	8d 93       	st	X+, r24
    2376:	9c 93       	st	X, r25
    2378:	fe 01       	movw	r30, r28
    237a:	eb 5a       	subi	r30, 0xAB	; 171
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_displayCharacter+0x184>
    2386:	fe 01       	movw	r30, r28
    2388:	eb 5a       	subi	r30, 0xAB	; 171
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	62 e0       	ldi	r22, 0x02	; 2
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    239a:	fe 01       	movw	r30, r28
    239c:	ef 5a       	subi	r30, 0xAF	; 175
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e8       	ldi	r26, 0x80	; 128
    23a6:	bf e3       	ldi	r27, 0x3F	; 63
    23a8:	80 83       	st	Z, r24
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	a2 83       	std	Z+2, r26	; 0x02
    23ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	8e 01       	movw	r16, r28
    23b2:	03 5b       	subi	r16, 0xB3	; 179
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	fe 01       	movw	r30, r28
    23b8:	ef 5a       	subi	r30, 0xAF	; 175
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a e7       	ldi	r20, 0x7A	; 122
    23ca:	55 e4       	ldi	r21, 0x45	; 69
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	f8 01       	movw	r30, r16
    23d6:	80 83       	st	Z, r24
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	a2 83       	std	Z+2, r26	; 0x02
    23dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23de:	fe 01       	movw	r30, r28
    23e0:	e3 5b       	subi	r30, 0xB3	; 179
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	60 81       	ld	r22, Z
    23e6:	71 81       	ldd	r23, Z+1	; 0x01
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	93 81       	ldd	r25, Z+3	; 0x03
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	44 f4       	brge	.+16     	; 0x240c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    23fc:	fe 01       	movw	r30, r28
    23fe:	e5 5b       	subi	r30, 0xB5	; 181
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	80 83       	st	Z, r24
    240a:	64 c0       	rjmp	.+200    	; 0x24d4 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    240c:	fe 01       	movw	r30, r28
    240e:	e3 5b       	subi	r30, 0xB3	; 179
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	60 81       	ld	r22, Z
    2414:	71 81       	ldd	r23, Z+1	; 0x01
    2416:	82 81       	ldd	r24, Z+2	; 0x02
    2418:	93 81       	ldd	r25, Z+3	; 0x03
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	3f ef       	ldi	r19, 0xFF	; 255
    241e:	4f e7       	ldi	r20, 0x7F	; 127
    2420:	57 e4       	ldi	r21, 0x47	; 71
    2422:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2426:	18 16       	cp	r1, r24
    2428:	0c f0       	brlt	.+2      	; 0x242c <LCD_displayCharacter+0x22e>
    242a:	43 c0       	rjmp	.+134    	; 0x24b2 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	fe 01       	movw	r30, r28
    242e:	ef 5a       	subi	r30, 0xAF	; 175
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	51 e4       	ldi	r21, 0x41	; 65
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8e 01       	movw	r16, r28
    244c:	05 5b       	subi	r16, 0xB5	; 181
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	f8 01       	movw	r30, r16
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
    2462:	1f c0       	rjmp	.+62     	; 0x24a2 <LCD_displayCharacter+0x2a4>
    2464:	fe 01       	movw	r30, r28
    2466:	e7 5b       	subi	r30, 0xB7	; 183
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 e9       	ldi	r24, 0x90	; 144
    246c:	91 e0       	ldi	r25, 0x01	; 1
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	80 83       	st	Z, r24
    2472:	fe 01       	movw	r30, r28
    2474:	e7 5b       	subi	r30, 0xB7	; 183
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 81       	ld	r24, Z
    247a:	91 81       	ldd	r25, Z+1	; 0x01
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_displayCharacter+0x27e>
    2480:	fe 01       	movw	r30, r28
    2482:	e7 5b       	subi	r30, 0xB7	; 183
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248a:	de 01       	movw	r26, r28
    248c:	a5 5b       	subi	r26, 0xB5	; 181
    248e:	bf 4f       	sbci	r27, 0xFF	; 255
    2490:	fe 01       	movw	r30, r28
    2492:	e5 5b       	subi	r30, 0xB5	; 181
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	11 96       	adiw	r26, 0x01	; 1
    249e:	9c 93       	st	X, r25
    24a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a2:	fe 01       	movw	r30, r28
    24a4:	e5 5b       	subi	r30, 0xB5	; 181
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	d1 f6       	brne	.-76     	; 0x2464 <LCD_displayCharacter+0x266>
    24b0:	27 c0       	rjmp	.+78     	; 0x2500 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	8e 01       	movw	r16, r28
    24b4:	05 5b       	subi	r16, 0xB5	; 181
    24b6:	1f 4f       	sbci	r17, 0xFF	; 255
    24b8:	fe 01       	movw	r30, r28
    24ba:	e3 5b       	subi	r30, 0xB3	; 179
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	60 81       	ld	r22, Z
    24c0:	71 81       	ldd	r23, Z+1	; 0x01
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	93 81       	ldd	r25, Z+3	; 0x03
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	f8 01       	movw	r30, r16
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24
    24d4:	de 01       	movw	r26, r28
    24d6:	a9 5b       	subi	r26, 0xB9	; 185
    24d8:	bf 4f       	sbci	r27, 0xFF	; 255
    24da:	fe 01       	movw	r30, r28
    24dc:	e5 5b       	subi	r30, 0xB5	; 181
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 81       	ld	r24, Z
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	8d 93       	st	X+, r24
    24e6:	9c 93       	st	X, r25
    24e8:	fe 01       	movw	r30, r28
    24ea:	e9 5b       	subi	r30, 0xB9	; 185
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_displayCharacter+0x2f4>
    24f6:	fe 01       	movw	r30, r28
    24f8:	e9 5b       	subi	r30, 0xB9	; 185
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2500:	fe 01       	movw	r30, r28
    2502:	ed 59       	subi	r30, 0x9D	; 157
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	80 81       	ld	r24, Z
    2508:	88 2f       	mov	r24, r24
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	80 71       	andi	r24, 0x10	; 16
    250e:	90 70       	andi	r25, 0x00	; 0
    2510:	95 95       	asr	r25
    2512:	87 95       	ror	r24
    2514:	95 95       	asr	r25
    2516:	87 95       	ror	r24
    2518:	95 95       	asr	r25
    251a:	87 95       	ror	r24
    251c:	95 95       	asr	r25
    251e:	87 95       	ror	r24
    2520:	98 2f       	mov	r25, r24
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	63 e0       	ldi	r22, 0x03	; 3
    2526:	49 2f       	mov	r20, r25
    2528:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    252c:	fe 01       	movw	r30, r28
    252e:	ed 59       	subi	r30, 0x9D	; 157
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 81       	ld	r24, Z
    2534:	88 2f       	mov	r24, r24
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	80 72       	andi	r24, 0x20	; 32
    253a:	90 70       	andi	r25, 0x00	; 0
    253c:	95 95       	asr	r25
    253e:	87 95       	ror	r24
    2540:	95 95       	asr	r25
    2542:	87 95       	ror	r24
    2544:	95 95       	asr	r25
    2546:	87 95       	ror	r24
    2548:	95 95       	asr	r25
    254a:	87 95       	ror	r24
    254c:	95 95       	asr	r25
    254e:	87 95       	ror	r24
    2550:	98 2f       	mov	r25, r24
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	64 e0       	ldi	r22, 0x04	; 4
    2556:	49 2f       	mov	r20, r25
    2558:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    255c:	fe 01       	movw	r30, r28
    255e:	ed 59       	subi	r30, 0x9D	; 157
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	80 81       	ld	r24, Z
    2564:	88 2f       	mov	r24, r24
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	80 74       	andi	r24, 0x40	; 64
    256a:	90 70       	andi	r25, 0x00	; 0
    256c:	08 2e       	mov	r0, r24
    256e:	89 2f       	mov	r24, r25
    2570:	00 0c       	add	r0, r0
    2572:	88 1f       	adc	r24, r24
    2574:	99 0b       	sbc	r25, r25
    2576:	00 0c       	add	r0, r0
    2578:	88 1f       	adc	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	98 2f       	mov	r25, r24
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	65 e0       	ldi	r22, 0x05	; 5
    2582:	49 2f       	mov	r20, r25
    2584:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2588:	fe 01       	movw	r30, r28
    258a:	ed 59       	subi	r30, 0x9D	; 157
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	98 2f       	mov	r25, r24
    2592:	99 1f       	adc	r25, r25
    2594:	99 27       	eor	r25, r25
    2596:	99 1f       	adc	r25, r25
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	66 e0       	ldi	r22, 0x06	; 6
    259c:	49 2f       	mov	r20, r25
    259e:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    25a2:	fe 01       	movw	r30, r28
    25a4:	ed 5b       	subi	r30, 0xBD	; 189
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	a0 e8       	ldi	r26, 0x80	; 128
    25ae:	bf e3       	ldi	r27, 0x3F	; 63
    25b0:	80 83       	st	Z, r24
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	a2 83       	std	Z+2, r26	; 0x02
    25b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b8:	8e 01       	movw	r16, r28
    25ba:	01 5c       	subi	r16, 0xC1	; 193
    25bc:	1f 4f       	sbci	r17, 0xFF	; 255
    25be:	fe 01       	movw	r30, r28
    25c0:	ed 5b       	subi	r30, 0xBD	; 189
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4a e7       	ldi	r20, 0x7A	; 122
    25d2:	55 e4       	ldi	r21, 0x45	; 69
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	f8 01       	movw	r30, r16
    25de:	80 83       	st	Z, r24
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	a2 83       	std	Z+2, r26	; 0x02
    25e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25e6:	fe 01       	movw	r30, r28
    25e8:	ff 96       	adiw	r30, 0x3f	; 63
    25ea:	60 81       	ld	r22, Z
    25ec:	71 81       	ldd	r23, Z+1	; 0x01
    25ee:	82 81       	ldd	r24, Z+2	; 0x02
    25f0:	93 81       	ldd	r25, Z+3	; 0x03
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e8       	ldi	r20, 0x80	; 128
    25f8:	5f e3       	ldi	r21, 0x3F	; 63
    25fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25fe:	88 23       	and	r24, r24
    2600:	2c f4       	brge	.+10     	; 0x260c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9e af       	std	Y+62, r25	; 0x3e
    2608:	8d af       	std	Y+61, r24	; 0x3d
    260a:	46 c0       	rjmp	.+140    	; 0x2698 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    260c:	fe 01       	movw	r30, r28
    260e:	ff 96       	adiw	r30, 0x3f	; 63
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	3f ef       	ldi	r19, 0xFF	; 255
    261c:	4f e7       	ldi	r20, 0x7F	; 127
    261e:	57 e4       	ldi	r21, 0x47	; 71
    2620:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2624:	18 16       	cp	r1, r24
    2626:	64 f5       	brge	.+88     	; 0x2680 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2628:	fe 01       	movw	r30, r28
    262a:	ed 5b       	subi	r30, 0xBD	; 189
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9e af       	std	Y+62, r25	; 0x3e
    2654:	8d af       	std	Y+61, r24	; 0x3d
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <LCD_displayCharacter+0x478>
    2658:	80 e9       	ldi	r24, 0x90	; 144
    265a:	91 e0       	ldi	r25, 0x01	; 1
    265c:	9c af       	std	Y+60, r25	; 0x3c
    265e:	8b af       	std	Y+59, r24	; 0x3b
    2660:	8b ad       	ldd	r24, Y+59	; 0x3b
    2662:	9c ad       	ldd	r25, Y+60	; 0x3c
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_displayCharacter+0x466>
    2668:	9c af       	std	Y+60, r25	; 0x3c
    266a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	8d ad       	ldd	r24, Y+61	; 0x3d
    266e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	9e af       	std	Y+62, r25	; 0x3e
    2674:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	8d ad       	ldd	r24, Y+61	; 0x3d
    2678:	9e ad       	ldd	r25, Y+62	; 0x3e
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	69 f7       	brne	.-38     	; 0x2658 <LCD_displayCharacter+0x45a>
    267e:	16 c0       	rjmp	.+44     	; 0x26ac <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	fe 01       	movw	r30, r28
    2682:	ff 96       	adiw	r30, 0x3f	; 63
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9e af       	std	Y+62, r25	; 0x3e
    2696:	8d af       	std	Y+61, r24	; 0x3d
    2698:	8d ad       	ldd	r24, Y+61	; 0x3d
    269a:	9e ad       	ldd	r25, Y+62	; 0x3e
    269c:	9a af       	std	Y+58, r25	; 0x3a
    269e:	89 af       	std	Y+57, r24	; 0x39
    26a0:	89 ad       	ldd	r24, Y+57	; 0x39
    26a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_displayCharacter+0x4a6>
    26a8:	9a af       	std	Y+58, r25	; 0x3a
    26aa:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	62 e0       	ldi	r22, 0x02	; 2
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	a0 e8       	ldi	r26, 0x80	; 128
    26bc:	bf e3       	ldi	r27, 0x3F	; 63
    26be:	8d ab       	std	Y+53, r24	; 0x35
    26c0:	9e ab       	std	Y+54, r25	; 0x36
    26c2:	af ab       	std	Y+55, r26	; 0x37
    26c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c6:	6d a9       	ldd	r22, Y+53	; 0x35
    26c8:	7e a9       	ldd	r23, Y+54	; 0x36
    26ca:	8f a9       	ldd	r24, Y+55	; 0x37
    26cc:	98 ad       	ldd	r25, Y+56	; 0x38
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	4a e7       	ldi	r20, 0x7A	; 122
    26d4:	55 e4       	ldi	r21, 0x45	; 69
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	89 ab       	std	Y+49, r24	; 0x31
    26e0:	9a ab       	std	Y+50, r25	; 0x32
    26e2:	ab ab       	std	Y+51, r26	; 0x33
    26e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26e6:	69 a9       	ldd	r22, Y+49	; 0x31
    26e8:	7a a9       	ldd	r23, Y+50	; 0x32
    26ea:	8b a9       	ldd	r24, Y+51	; 0x33
    26ec:	9c a9       	ldd	r25, Y+52	; 0x34
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e8       	ldi	r20, 0x80	; 128
    26f4:	5f e3       	ldi	r21, 0x3F	; 63
    26f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26fa:	88 23       	and	r24, r24
    26fc:	2c f4       	brge	.+10     	; 0x2708 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	98 ab       	std	Y+48, r25	; 0x30
    2704:	8f a7       	std	Y+47, r24	; 0x2f
    2706:	3f c0       	rjmp	.+126    	; 0x2786 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2708:	69 a9       	ldd	r22, Y+49	; 0x31
    270a:	7a a9       	ldd	r23, Y+50	; 0x32
    270c:	8b a9       	ldd	r24, Y+51	; 0x33
    270e:	9c a9       	ldd	r25, Y+52	; 0x34
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	3f ef       	ldi	r19, 0xFF	; 255
    2714:	4f e7       	ldi	r20, 0x7F	; 127
    2716:	57 e4       	ldi	r21, 0x47	; 71
    2718:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    271c:	18 16       	cp	r1, r24
    271e:	4c f5       	brge	.+82     	; 0x2772 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2720:	6d a9       	ldd	r22, Y+53	; 0x35
    2722:	7e a9       	ldd	r23, Y+54	; 0x36
    2724:	8f a9       	ldd	r24, Y+55	; 0x37
    2726:	98 ad       	ldd	r25, Y+56	; 0x38
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e2       	ldi	r20, 0x20	; 32
    272e:	51 e4       	ldi	r21, 0x41	; 65
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	98 ab       	std	Y+48, r25	; 0x30
    2746:	8f a7       	std	Y+47, r24	; 0x2f
    2748:	0f c0       	rjmp	.+30     	; 0x2768 <LCD_displayCharacter+0x56a>
    274a:	80 e9       	ldi	r24, 0x90	; 144
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	9e a7       	std	Y+46, r25	; 0x2e
    2750:	8d a7       	std	Y+45, r24	; 0x2d
    2752:	8d a5       	ldd	r24, Y+45	; 0x2d
    2754:	9e a5       	ldd	r25, Y+46	; 0x2e
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <LCD_displayCharacter+0x558>
    275a:	9e a7       	std	Y+46, r25	; 0x2e
    275c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2760:	98 a9       	ldd	r25, Y+48	; 0x30
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	98 ab       	std	Y+48, r25	; 0x30
    2766:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2768:	8f a5       	ldd	r24, Y+47	; 0x2f
    276a:	98 a9       	ldd	r25, Y+48	; 0x30
    276c:	00 97       	sbiw	r24, 0x00	; 0
    276e:	69 f7       	brne	.-38     	; 0x274a <LCD_displayCharacter+0x54c>
    2770:	14 c0       	rjmp	.+40     	; 0x279a <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2772:	69 a9       	ldd	r22, Y+49	; 0x31
    2774:	7a a9       	ldd	r23, Y+50	; 0x32
    2776:	8b a9       	ldd	r24, Y+51	; 0x33
    2778:	9c a9       	ldd	r25, Y+52	; 0x34
    277a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	98 ab       	std	Y+48, r25	; 0x30
    2784:	8f a7       	std	Y+47, r24	; 0x2f
    2786:	8f a5       	ldd	r24, Y+47	; 0x2f
    2788:	98 a9       	ldd	r25, Y+48	; 0x30
    278a:	9c a7       	std	Y+44, r25	; 0x2c
    278c:	8b a7       	std	Y+43, r24	; 0x2b
    278e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2790:	9c a5       	ldd	r25, Y+44	; 0x2c
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <LCD_displayCharacter+0x594>
    2796:	9c a7       	std	Y+44, r25	; 0x2c
    2798:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	62 e0       	ldi	r22, 0x02	; 2
    279e:	41 e0       	ldi	r20, 0x01	; 1
    27a0:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	a0 e8       	ldi	r26, 0x80	; 128
    27aa:	bf e3       	ldi	r27, 0x3F	; 63
    27ac:	8f a3       	std	Y+39, r24	; 0x27
    27ae:	98 a7       	std	Y+40, r25	; 0x28
    27b0:	a9 a7       	std	Y+41, r26	; 0x29
    27b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b4:	6f a1       	ldd	r22, Y+39	; 0x27
    27b6:	78 a5       	ldd	r23, Y+40	; 0x28
    27b8:	89 a5       	ldd	r24, Y+41	; 0x29
    27ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	4a e7       	ldi	r20, 0x7A	; 122
    27c2:	55 e4       	ldi	r21, 0x45	; 69
    27c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	8b a3       	std	Y+35, r24	; 0x23
    27ce:	9c a3       	std	Y+36, r25	; 0x24
    27d0:	ad a3       	std	Y+37, r26	; 0x25
    27d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27d4:	6b a1       	ldd	r22, Y+35	; 0x23
    27d6:	7c a1       	ldd	r23, Y+36	; 0x24
    27d8:	8d a1       	ldd	r24, Y+37	; 0x25
    27da:	9e a1       	ldd	r25, Y+38	; 0x26
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e8       	ldi	r20, 0x80	; 128
    27e2:	5f e3       	ldi	r21, 0x3F	; 63
    27e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27e8:	88 23       	and	r24, r24
    27ea:	2c f4       	brge	.+10     	; 0x27f6 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9a a3       	std	Y+34, r25	; 0x22
    27f2:	89 a3       	std	Y+33, r24	; 0x21
    27f4:	3f c0       	rjmp	.+126    	; 0x2874 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    27f6:	6b a1       	ldd	r22, Y+35	; 0x23
    27f8:	7c a1       	ldd	r23, Y+36	; 0x24
    27fa:	8d a1       	ldd	r24, Y+37	; 0x25
    27fc:	9e a1       	ldd	r25, Y+38	; 0x26
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	3f ef       	ldi	r19, 0xFF	; 255
    2802:	4f e7       	ldi	r20, 0x7F	; 127
    2804:	57 e4       	ldi	r21, 0x47	; 71
    2806:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    280a:	18 16       	cp	r1, r24
    280c:	4c f5       	brge	.+82     	; 0x2860 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280e:	6f a1       	ldd	r22, Y+39	; 0x27
    2810:	78 a5       	ldd	r23, Y+40	; 0x28
    2812:	89 a5       	ldd	r24, Y+41	; 0x29
    2814:	9a a5       	ldd	r25, Y+42	; 0x2a
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e2       	ldi	r20, 0x20	; 32
    281c:	51 e4       	ldi	r21, 0x41	; 65
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	9a a3       	std	Y+34, r25	; 0x22
    2834:	89 a3       	std	Y+33, r24	; 0x21
    2836:	0f c0       	rjmp	.+30     	; 0x2856 <LCD_displayCharacter+0x658>
    2838:	80 e9       	ldi	r24, 0x90	; 144
    283a:	91 e0       	ldi	r25, 0x01	; 1
    283c:	98 a3       	std	Y+32, r25	; 0x20
    283e:	8f 8f       	std	Y+31, r24	; 0x1f
    2840:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2842:	98 a1       	ldd	r25, Y+32	; 0x20
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_displayCharacter+0x646>
    2848:	98 a3       	std	Y+32, r25	; 0x20
    284a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284c:	89 a1       	ldd	r24, Y+33	; 0x21
    284e:	9a a1       	ldd	r25, Y+34	; 0x22
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	9a a3       	std	Y+34, r25	; 0x22
    2854:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2856:	89 a1       	ldd	r24, Y+33	; 0x21
    2858:	9a a1       	ldd	r25, Y+34	; 0x22
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	69 f7       	brne	.-38     	; 0x2838 <LCD_displayCharacter+0x63a>
    285e:	14 c0       	rjmp	.+40     	; 0x2888 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2860:	6b a1       	ldd	r22, Y+35	; 0x23
    2862:	7c a1       	ldd	r23, Y+36	; 0x24
    2864:	8d a1       	ldd	r24, Y+37	; 0x25
    2866:	9e a1       	ldd	r25, Y+38	; 0x26
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	9a a3       	std	Y+34, r25	; 0x22
    2872:	89 a3       	std	Y+33, r24	; 0x21
    2874:	89 a1       	ldd	r24, Y+33	; 0x21
    2876:	9a a1       	ldd	r25, Y+34	; 0x22
    2878:	9e 8f       	std	Y+30, r25	; 0x1e
    287a:	8d 8f       	std	Y+29, r24	; 0x1d
    287c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    287e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_displayCharacter+0x682>
    2884:	9e 8f       	std	Y+30, r25	; 0x1e
    2886:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2888:	fe 01       	movw	r30, r28
    288a:	ed 59       	subi	r30, 0x9D	; 157
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	80 81       	ld	r24, Z
    2890:	98 2f       	mov	r25, r24
    2892:	91 70       	andi	r25, 0x01	; 1
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	63 e0       	ldi	r22, 0x03	; 3
    2898:	49 2f       	mov	r20, r25
    289a:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    289e:	fe 01       	movw	r30, r28
    28a0:	ed 59       	subi	r30, 0x9D	; 157
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	88 2f       	mov	r24, r24
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	82 70       	andi	r24, 0x02	; 2
    28ac:	90 70       	andi	r25, 0x00	; 0
    28ae:	95 95       	asr	r25
    28b0:	87 95       	ror	r24
    28b2:	98 2f       	mov	r25, r24
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	64 e0       	ldi	r22, 0x04	; 4
    28b8:	49 2f       	mov	r20, r25
    28ba:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    28be:	fe 01       	movw	r30, r28
    28c0:	ed 59       	subi	r30, 0x9D	; 157
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	80 81       	ld	r24, Z
    28c6:	88 2f       	mov	r24, r24
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	84 70       	andi	r24, 0x04	; 4
    28cc:	90 70       	andi	r25, 0x00	; 0
    28ce:	95 95       	asr	r25
    28d0:	87 95       	ror	r24
    28d2:	95 95       	asr	r25
    28d4:	87 95       	ror	r24
    28d6:	98 2f       	mov	r25, r24
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	65 e0       	ldi	r22, 0x05	; 5
    28dc:	49 2f       	mov	r20, r25
    28de:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    28e2:	fe 01       	movw	r30, r28
    28e4:	ed 59       	subi	r30, 0x9D	; 157
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	88 2f       	mov	r24, r24
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	88 70       	andi	r24, 0x08	; 8
    28f0:	90 70       	andi	r25, 0x00	; 0
    28f2:	95 95       	asr	r25
    28f4:	87 95       	ror	r24
    28f6:	95 95       	asr	r25
    28f8:	87 95       	ror	r24
    28fa:	95 95       	asr	r25
    28fc:	87 95       	ror	r24
    28fe:	98 2f       	mov	r25, r24
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	66 e0       	ldi	r22, 0x06	; 6
    2904:	49 2f       	mov	r20, r25
    2906:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a0 e8       	ldi	r26, 0x80	; 128
    2910:	bf e3       	ldi	r27, 0x3F	; 63
    2912:	89 8f       	std	Y+25, r24	; 0x19
    2914:	9a 8f       	std	Y+26, r25	; 0x1a
    2916:	ab 8f       	std	Y+27, r26	; 0x1b
    2918:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291a:	69 8d       	ldd	r22, Y+25	; 0x19
    291c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    291e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2920:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	4a e7       	ldi	r20, 0x7A	; 122
    2928:	55 e4       	ldi	r21, 0x45	; 69
    292a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	8d 8b       	std	Y+21, r24	; 0x15
    2934:	9e 8b       	std	Y+22, r25	; 0x16
    2936:	af 8b       	std	Y+23, r26	; 0x17
    2938:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    293a:	6d 89       	ldd	r22, Y+21	; 0x15
    293c:	7e 89       	ldd	r23, Y+22	; 0x16
    293e:	8f 89       	ldd	r24, Y+23	; 0x17
    2940:	98 8d       	ldd	r25, Y+24	; 0x18
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e8       	ldi	r20, 0x80	; 128
    2948:	5f e3       	ldi	r21, 0x3F	; 63
    294a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    294e:	88 23       	and	r24, r24
    2950:	2c f4       	brge	.+10     	; 0x295c <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9c 8b       	std	Y+20, r25	; 0x14
    2958:	8b 8b       	std	Y+19, r24	; 0x13
    295a:	3f c0       	rjmp	.+126    	; 0x29da <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    295c:	6d 89       	ldd	r22, Y+21	; 0x15
    295e:	7e 89       	ldd	r23, Y+22	; 0x16
    2960:	8f 89       	ldd	r24, Y+23	; 0x17
    2962:	98 8d       	ldd	r25, Y+24	; 0x18
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	3f ef       	ldi	r19, 0xFF	; 255
    2968:	4f e7       	ldi	r20, 0x7F	; 127
    296a:	57 e4       	ldi	r21, 0x47	; 71
    296c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2970:	18 16       	cp	r1, r24
    2972:	4c f5       	brge	.+82     	; 0x29c6 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2974:	69 8d       	ldd	r22, Y+25	; 0x19
    2976:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2978:	8b 8d       	ldd	r24, Y+27	; 0x1b
    297a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e2       	ldi	r20, 0x20	; 32
    2982:	51 e4       	ldi	r21, 0x41	; 65
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	9c 8b       	std	Y+20, r25	; 0x14
    299a:	8b 8b       	std	Y+19, r24	; 0x13
    299c:	0f c0       	rjmp	.+30     	; 0x29bc <LCD_displayCharacter+0x7be>
    299e:	80 e9       	ldi	r24, 0x90	; 144
    29a0:	91 e0       	ldi	r25, 0x01	; 1
    29a2:	9a 8b       	std	Y+18, r25	; 0x12
    29a4:	89 8b       	std	Y+17, r24	; 0x11
    29a6:	89 89       	ldd	r24, Y+17	; 0x11
    29a8:	9a 89       	ldd	r25, Y+18	; 0x12
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <LCD_displayCharacter+0x7ac>
    29ae:	9a 8b       	std	Y+18, r25	; 0x12
    29b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b2:	8b 89       	ldd	r24, Y+19	; 0x13
    29b4:	9c 89       	ldd	r25, Y+20	; 0x14
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	9c 8b       	std	Y+20, r25	; 0x14
    29ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29bc:	8b 89       	ldd	r24, Y+19	; 0x13
    29be:	9c 89       	ldd	r25, Y+20	; 0x14
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	69 f7       	brne	.-38     	; 0x299e <LCD_displayCharacter+0x7a0>
    29c4:	14 c0       	rjmp	.+40     	; 0x29ee <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c6:	6d 89       	ldd	r22, Y+21	; 0x15
    29c8:	7e 89       	ldd	r23, Y+22	; 0x16
    29ca:	8f 89       	ldd	r24, Y+23	; 0x17
    29cc:	98 8d       	ldd	r25, Y+24	; 0x18
    29ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	9c 8b       	std	Y+20, r25	; 0x14
    29d8:	8b 8b       	std	Y+19, r24	; 0x13
    29da:	8b 89       	ldd	r24, Y+19	; 0x13
    29dc:	9c 89       	ldd	r25, Y+20	; 0x14
    29de:	98 8b       	std	Y+16, r25	; 0x10
    29e0:	8f 87       	std	Y+15, r24	; 0x0f
    29e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e4:	98 89       	ldd	r25, Y+16	; 0x10
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <LCD_displayCharacter+0x7e8>
    29ea:	98 8b       	std	Y+16, r25	; 0x10
    29ec:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	62 e0       	ldi	r22, 0x02	; 2
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	a0 e8       	ldi	r26, 0x80	; 128
    29fe:	bf e3       	ldi	r27, 0x3F	; 63
    2a00:	8b 87       	std	Y+11, r24	; 0x0b
    2a02:	9c 87       	std	Y+12, r25	; 0x0c
    2a04:	ad 87       	std	Y+13, r26	; 0x0d
    2a06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	4a e7       	ldi	r20, 0x7A	; 122
    2a16:	55 e4       	ldi	r21, 0x45	; 69
    2a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	8f 83       	std	Y+7, r24	; 0x07
    2a22:	98 87       	std	Y+8, r25	; 0x08
    2a24:	a9 87       	std	Y+9, r26	; 0x09
    2a26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a28:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2a:	78 85       	ldd	r23, Y+8	; 0x08
    2a2c:	89 85       	ldd	r24, Y+9	; 0x09
    2a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e8       	ldi	r20, 0x80	; 128
    2a36:	5f e3       	ldi	r21, 0x3F	; 63
    2a38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a3c:	88 23       	and	r24, r24
    2a3e:	2c f4       	brge	.+10     	; 0x2a4a <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	9e 83       	std	Y+6, r25	; 0x06
    2a46:	8d 83       	std	Y+5, r24	; 0x05
    2a48:	3f c0       	rjmp	.+126    	; 0x2ac8 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4c:	78 85       	ldd	r23, Y+8	; 0x08
    2a4e:	89 85       	ldd	r24, Y+9	; 0x09
    2a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	3f ef       	ldi	r19, 0xFF	; 255
    2a56:	4f e7       	ldi	r20, 0x7F	; 127
    2a58:	57 e4       	ldi	r21, 0x47	; 71
    2a5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a5e:	18 16       	cp	r1, r24
    2a60:	4c f5       	brge	.+82     	; 0x2ab4 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	40 e2       	ldi	r20, 0x20	; 32
    2a70:	51 e4       	ldi	r21, 0x41	; 65
    2a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	bc 01       	movw	r22, r24
    2a7c:	cd 01       	movw	r24, r26
    2a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	9e 83       	std	Y+6, r25	; 0x06
    2a88:	8d 83       	std	Y+5, r24	; 0x05
    2a8a:	0f c0       	rjmp	.+30     	; 0x2aaa <LCD_displayCharacter+0x8ac>
    2a8c:	80 e9       	ldi	r24, 0x90	; 144
    2a8e:	91 e0       	ldi	r25, 0x01	; 1
    2a90:	9c 83       	std	Y+4, r25	; 0x04
    2a92:	8b 83       	std	Y+3, r24	; 0x03
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	9c 81       	ldd	r25, Y+4	; 0x04
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <LCD_displayCharacter+0x89a>
    2a9c:	9c 83       	std	Y+4, r25	; 0x04
    2a9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	9e 83       	std	Y+6, r25	; 0x06
    2aa8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2aac:	9e 81       	ldd	r25, Y+6	; 0x06
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	69 f7       	brne	.-38     	; 0x2a8c <LCD_displayCharacter+0x88e>
    2ab2:	14 c0       	rjmp	.+40     	; 0x2adc <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab6:	78 85       	ldd	r23, Y+8	; 0x08
    2ab8:	89 85       	ldd	r24, Y+9	; 0x09
    2aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9e 83       	std	Y+6, r25	; 0x06
    2ac6:	8d 83       	std	Y+5, r24	; 0x05
    2ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aca:	9e 81       	ldd	r25, Y+6	; 0x06
    2acc:	9a 83       	std	Y+2, r25	; 0x02
    2ace:	89 83       	std	Y+1, r24	; 0x01
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <LCD_displayCharacter+0x8d6>
    2ad8:	9a 83       	std	Y+2, r25	; 0x02
    2ada:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2adc:	cd 59       	subi	r28, 0x9D	; 157
    2ade:	df 4f       	sbci	r29, 0xFF	; 255
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	1f 91       	pop	r17
    2af0:	0f 91       	pop	r16
    2af2:	08 95       	ret

00002af4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <LCD_displayString+0x6>
    2afa:	0f 92       	push	r0
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    2b00:	9b 83       	std	Y+3, r25	; 0x03
    2b02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b04:	19 82       	std	Y+1, r1	; 0x01
    2b06:	0e c0       	rjmp	.+28     	; 0x2b24 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	9b 81       	ldd	r25, Y+3	; 0x03
    2b12:	fc 01       	movw	r30, r24
    2b14:	e2 0f       	add	r30, r18
    2b16:	f3 1f       	adc	r31, r19
    2b18:	80 81       	ld	r24, Z
    2b1a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LCD_displayCharacter>
		i++;
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	8f 5f       	subi	r24, 0xFF	; 255
    2b22:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2e:	fc 01       	movw	r30, r24
    2b30:	e2 0f       	add	r30, r18
    2b32:	f3 1f       	adc	r31, r19
    2b34:	80 81       	ld	r24, Z
    2b36:	88 23       	and	r24, r24
    2b38:	39 f7       	brne	.-50     	; 0x2b08 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	cf 91       	pop	r28
    2b42:	df 91       	pop	r29
    2b44:	08 95       	ret

00002b46 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2b46:	df 93       	push	r29
    2b48:	cf 93       	push	r28
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <LCD_moveCursor+0x6>
    2b4c:	00 d0       	rcall	.+0      	; 0x2b4e <LCD_moveCursor+0x8>
    2b4e:	0f 92       	push	r0
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	8a 83       	std	Y+2, r24	; 0x02
    2b56:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2b58:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5a:	28 2f       	mov	r18, r24
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	3d 83       	std	Y+5, r19	; 0x05
    2b60:	2c 83       	std	Y+4, r18	; 0x04
    2b62:	8c 81       	ldd	r24, Y+4	; 0x04
    2b64:	9d 81       	ldd	r25, Y+5	; 0x05
    2b66:	81 30       	cpi	r24, 0x01	; 1
    2b68:	91 05       	cpc	r25, r1
    2b6a:	c1 f0       	breq	.+48     	; 0x2b9c <LCD_moveCursor+0x56>
    2b6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b70:	22 30       	cpi	r18, 0x02	; 2
    2b72:	31 05       	cpc	r19, r1
    2b74:	2c f4       	brge	.+10     	; 0x2b80 <LCD_moveCursor+0x3a>
    2b76:	8c 81       	ldd	r24, Y+4	; 0x04
    2b78:	9d 81       	ldd	r25, Y+5	; 0x05
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	61 f0       	breq	.+24     	; 0x2b96 <LCD_moveCursor+0x50>
    2b7e:	19 c0       	rjmp	.+50     	; 0x2bb2 <LCD_moveCursor+0x6c>
    2b80:	2c 81       	ldd	r18, Y+4	; 0x04
    2b82:	3d 81       	ldd	r19, Y+5	; 0x05
    2b84:	22 30       	cpi	r18, 0x02	; 2
    2b86:	31 05       	cpc	r19, r1
    2b88:	69 f0       	breq	.+26     	; 0x2ba4 <LCD_moveCursor+0x5e>
    2b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b8e:	83 30       	cpi	r24, 0x03	; 3
    2b90:	91 05       	cpc	r25, r1
    2b92:	61 f0       	breq	.+24     	; 0x2bac <LCD_moveCursor+0x66>
    2b94:	0e c0       	rjmp	.+28     	; 0x2bb2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	0b c0       	rjmp	.+22     	; 0x2bb2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9e:	80 5c       	subi	r24, 0xC0	; 192
    2ba0:	89 83       	std	Y+1, r24	; 0x01
    2ba2:	07 c0       	rjmp	.+14     	; 0x2bb2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	80 5f       	subi	r24, 0xF0	; 240
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	03 c0       	rjmp	.+6      	; 0x2bb2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	80 5b       	subi	r24, 0xB0	; 176
    2bb0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	80 68       	ori	r24, 0x80	; 128
    2bb6:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_sendCommand>
}
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	cf 91       	pop	r28
    2bc6:	df 91       	pop	r29
    2bc8:	08 95       	ret

00002bca <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <LCD_displayStringRowColumn+0x6>
    2bd0:	00 d0       	rcall	.+0      	; 0x2bd2 <LCD_displayStringRowColumn+0x8>
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	89 83       	std	Y+1, r24	; 0x01
    2bd8:	6a 83       	std	Y+2, r22	; 0x02
    2bda:	5c 83       	std	Y+4, r21	; 0x04
    2bdc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	6a 81       	ldd	r22, Y+2	; 0x02
    2be2:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bea:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_displayString>
}
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	62 97       	sbiw	r28, 0x12	; 18
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	9a 8b       	std	Y+18, r25	; 0x12
    2c12:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c14:	89 89       	ldd	r24, Y+17	; 0x11
    2c16:	9a 89       	ldd	r25, Y+18	; 0x12
    2c18:	9e 01       	movw	r18, r28
    2c1a:	2f 5f       	subi	r18, 0xFF	; 255
    2c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1e:	b9 01       	movw	r22, r18
    2c20:	4a e0       	ldi	r20, 0x0A	; 10
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	0e 94 ca 18 	call	0x3194	; 0x3194 <itoa>
   LCD_displayString(buff); /* Display the string */
    2c28:	ce 01       	movw	r24, r28
    2c2a:	01 96       	adiw	r24, 0x01	; 1
    2c2c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_displayString>
}
    2c30:	62 96       	adiw	r28, 0x12	; 18
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	08 95       	ret

00002c42 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_sendCommand>
}
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <LEDS_init>:
 *      Author: MOH
 */
#include "common_macros.h"
#include "gpio.h"
#include "led.h"
void LEDS_init(void){
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(RED_LED_PORT_ID,RED_LED_PIN_ID,PIN_OUTPUT);
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	41 e0       	ldi	r20, 0x01	; 1
    2c64:	0e 94 b1 07 	call	0xf62	; 0xf62 <GPIO_setupPinDirection>
    GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID,LOGIC_LOW);
    2c68:	82 e0       	ldi	r24, 0x02	; 2
    2c6a:	60 e0       	ldi	r22, 0x00	; 0
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>

	GPIO_setupPinDirection(BLUE_LED_PORT_ID,BLUE_LED_PIN_ID,PIN_OUTPUT);
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	62 e0       	ldi	r22, 0x02	; 2
    2c76:	41 e0       	ldi	r20, 0x01	; 1
    2c78:	0e 94 b1 07 	call	0xf62	; 0xf62 <GPIO_setupPinDirection>
    GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID,LOGIC_LOW);
    2c7c:	82 e0       	ldi	r24, 0x02	; 2
    2c7e:	62 e0       	ldi	r22, 0x02	; 2
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>

	GPIO_setupPinDirection(GREEN_LED_PORT_ID,GREEN_LED_PIN_ID,PIN_OUTPUT);
    2c86:	82 e0       	ldi	r24, 0x02	; 2
    2c88:	61 e0       	ldi	r22, 0x01	; 1
    2c8a:	41 e0       	ldi	r20, 0x01	; 1
    2c8c:	0e 94 b1 07 	call	0xf62	; 0xf62 <GPIO_setupPinDirection>
    GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID,LOGIC_LOW);
    2c90:	82 e0       	ldi	r24, 0x02	; 2
    2c92:	61 e0       	ldi	r22, 0x01	; 1
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
}
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <LED_on>:
void LED_on(LED_ID id)
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <LED_on+0x6>
    2ca6:	0f 92       	push	r0
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	89 83       	std	Y+1, r24	; 0x01
	switch(id)
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	28 2f       	mov	r18, r24
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	3b 83       	std	Y+3, r19	; 0x03
    2cb6:	2a 83       	std	Y+2, r18	; 0x02
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbc:	81 30       	cpi	r24, 0x01	; 1
    2cbe:	91 05       	cpc	r25, r1
    2cc0:	79 f0       	breq	.+30     	; 0x2ce0 <LED_on+0x40>
    2cc2:	2a 81       	ldd	r18, Y+2	; 0x02
    2cc4:	3b 81       	ldd	r19, Y+3	; 0x03
    2cc6:	22 30       	cpi	r18, 0x02	; 2
    2cc8:	31 05       	cpc	r19, r1
    2cca:	81 f0       	breq	.+32     	; 0x2cec <LED_on+0x4c>
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	89 f4       	brne	.+34     	; 0x2cf6 <LED_on+0x56>
	{
		case LED_RED:
			GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LED_ON);
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	41 e0       	ldi	r20, 0x01	; 1
    2cda:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    2cde:	0b c0       	rjmp	.+22     	; 0x2cf6 <LED_on+0x56>
			break;
		case LED_GREEN:
			GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LED_ON);
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	61 e0       	ldi	r22, 0x01	; 1
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    2cea:	05 c0       	rjmp	.+10     	; 0x2cf6 <LED_on+0x56>
			break;
		case LED_BLUE:
			GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, LED_ON);
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	62 e0       	ldi	r22, 0x02	; 2
    2cf0:	41 e0       	ldi	r20, 0x01	; 1
    2cf2:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
			break;
	}
}
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <LED_off>:

void LED_off(LED_ID id)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <LED_off+0x6>
    2d08:	0f 92       	push	r0
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	89 83       	std	Y+1, r24	; 0x01
	switch(id)
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	28 2f       	mov	r18, r24
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	3b 83       	std	Y+3, r19	; 0x03
    2d18:	2a 83       	std	Y+2, r18	; 0x02
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1e:	81 30       	cpi	r24, 0x01	; 1
    2d20:	91 05       	cpc	r25, r1
    2d22:	79 f0       	breq	.+30     	; 0x2d42 <LED_off+0x40>
    2d24:	2a 81       	ldd	r18, Y+2	; 0x02
    2d26:	3b 81       	ldd	r19, Y+3	; 0x03
    2d28:	22 30       	cpi	r18, 0x02	; 2
    2d2a:	31 05       	cpc	r19, r1
    2d2c:	81 f0       	breq	.+32     	; 0x2d4e <LED_off+0x4c>
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	9b 81       	ldd	r25, Y+3	; 0x03
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	89 f4       	brne	.+34     	; 0x2d58 <LED_off+0x56>
	{
		case LED_RED:
			GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LED_OFF);
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    2d40:	0b c0       	rjmp	.+22     	; 0x2d58 <LED_off+0x56>
			break;
		case LED_GREEN:
			GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LED_OFF);
    2d42:	82 e0       	ldi	r24, 0x02	; 2
    2d44:	61 e0       	ldi	r22, 0x01	; 1
    2d46:	40 e0       	ldi	r20, 0x00	; 0
    2d48:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
    2d4c:	05 c0       	rjmp	.+10     	; 0x2d58 <LED_off+0x56>
			break;
		case LED_BLUE:
			GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, LED_OFF);
    2d4e:	82 e0       	ldi	r24, 0x02	; 2
    2d50:	62 e0       	ldi	r22, 0x02	; 2
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_writePin>
			break;
	}
}
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <display>:
#include "buzzer.h"
#include <util/delay.h>
#include <avr/interrupt.h>
#include "lcd.h"
uint16 distance;
void display(void) {
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(0, 0);
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	60 e0       	ldi	r22, 0x00	; 0
    2d70:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_moveCursor>
	LCD_displayString("Distance=");
    2d74:	80 e6       	ldi	r24, 0x60	; 96
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_displayString>
	LCD_moveCursor(0, 9);
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	69 e0       	ldi	r22, 0x09	; 9
    2d80:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_moveCursor>

	LCD_intgerToString(distance);
    2d84:	80 91 85 00 	lds	r24, 0x0085
    2d88:	90 91 86 00 	lds	r25, 0x0086
    2d8c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_intgerToString>

	if(distance < 100)
    2d90:	80 91 85 00 	lds	r24, 0x0085
    2d94:	90 91 86 00 	lds	r25, 0x0086
    2d98:	84 36       	cpi	r24, 0x64	; 100
    2d9a:	91 05       	cpc	r25, r1
    2d9c:	18 f4       	brcc	.+6      	; 0x2da4 <display+0x40>
	{
		LCD_displayCharacter(' ');
    2d9e:	80 e2       	ldi	r24, 0x20	; 32
    2da0:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LCD_displayCharacter>
	}

	LCD_moveCursor(1, 6);
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	66 e0       	ldi	r22, 0x06	; 6
    2da8:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_moveCursor>

	if(distance <= 5)
    2dac:	80 91 85 00 	lds	r24, 0x0085
    2db0:	90 91 86 00 	lds	r25, 0x0086
    2db4:	86 30       	cpi	r24, 0x06	; 6
    2db6:	91 05       	cpc	r25, r1
    2db8:	28 f4       	brcc	.+10     	; 0x2dc4 <display+0x60>
	{
		LCD_displayString("STOP");
    2dba:	8a e6       	ldi	r24, 0x6A	; 106
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_displayString>
    2dc2:	04 c0       	rjmp	.+8      	; 0x2dcc <display+0x68>
	}
	else
	{
		LCD_displayString("    ");
    2dc4:	8f e6       	ldi	r24, 0x6F	; 111
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_displayString>
	}
	LCD_moveCursor(0, 12);
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	6c e0       	ldi	r22, 0x0C	; 12
    2dd0:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LCD_moveCursor>
	LCD_displayString("CM");
    2dd4:	84 e7       	ldi	r24, 0x74	; 116
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_displayString>

}
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <buzzerled>:


void buzzerled(void){
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	6c 97       	sbiw	r28, 0x1c	; 28
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	cd bf       	out	0x3d, r28	; 61
	if(distance<=5){
    2df6:	80 91 85 00 	lds	r24, 0x0085
    2dfa:	90 91 86 00 	lds	r25, 0x0086
    2dfe:	86 30       	cpi	r24, 0x06	; 6
    2e00:	91 05       	cpc	r25, r1
    2e02:	08 f0       	brcs	.+2      	; 0x2e06 <buzzerled+0x24>
    2e04:	fb c0       	rjmp	.+502    	; 0x2ffc <buzzerled+0x21a>
		LED_on(LED_RED);
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LED_on>
		LED_on(LED_GREEN);
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LED_on>
		LED_on(LED_BLUE);
    2e12:	82 e0       	ldi	r24, 0x02	; 2
    2e14:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LED_on>
		Buzzer_on();
    2e18:	0e 94 99 07 	call	0xf32	; 0xf32 <Buzzer_on>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	aa ef       	ldi	r26, 0xFA	; 250
    2e22:	b3 e4       	ldi	r27, 0x43	; 67
    2e24:	89 8f       	std	Y+25, r24	; 0x19
    2e26:	9a 8f       	std	Y+26, r25	; 0x1a
    2e28:	ab 8f       	std	Y+27, r26	; 0x1b
    2e2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a e7       	ldi	r20, 0x7A	; 122
    2e3a:	55 e4       	ldi	r21, 0x45	; 69
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	8d 8b       	std	Y+21, r24	; 0x15
    2e46:	9e 8b       	std	Y+22, r25	; 0x16
    2e48:	af 8b       	std	Y+23, r26	; 0x17
    2e4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e50:	8f 89       	ldd	r24, Y+23	; 0x17
    2e52:	98 8d       	ldd	r25, Y+24	; 0x18
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <buzzerled+0x8c>
		__ticks = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	9c 8b       	std	Y+20, r25	; 0x14
    2e6a:	8b 8b       	std	Y+19, r24	; 0x13
    2e6c:	3f c0       	rjmp	.+126    	; 0x2eec <buzzerled+0x10a>
	else if (__tmp > 65535)
    2e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e70:	7e 89       	ldd	r23, Y+22	; 0x16
    2e72:	8f 89       	ldd	r24, Y+23	; 0x17
    2e74:	98 8d       	ldd	r25, Y+24	; 0x18
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f ef       	ldi	r19, 0xFF	; 255
    2e7a:	4f e7       	ldi	r20, 0x7F	; 127
    2e7c:	57 e4       	ldi	r21, 0x47	; 71
    2e7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e82:	18 16       	cp	r1, r24
    2e84:	4c f5       	brge	.+82     	; 0x2ed8 <buzzerled+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	69 8d       	ldd	r22, Y+25	; 0x19
    2e88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9c 8b       	std	Y+20, r25	; 0x14
    2eac:	8b 8b       	std	Y+19, r24	; 0x13
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <buzzerled+0xec>
    2eb0:	80 e9       	ldi	r24, 0x90	; 144
    2eb2:	91 e0       	ldi	r25, 0x01	; 1
    2eb4:	9a 8b       	std	Y+18, r25	; 0x12
    2eb6:	89 8b       	std	Y+17, r24	; 0x11
    2eb8:	89 89       	ldd	r24, Y+17	; 0x11
    2eba:	9a 89       	ldd	r25, Y+18	; 0x12
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <buzzerled+0xda>
    2ec0:	9a 8b       	std	Y+18, r25	; 0x12
    2ec2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	9c 8b       	std	Y+20, r25	; 0x14
    2ecc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <buzzerled+0xce>
    2ed6:	14 c0       	rjmp	.+40     	; 0x2f00 <buzzerled+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eda:	7e 89       	ldd	r23, Y+22	; 0x16
    2edc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ede:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9c 8b       	std	Y+20, r25	; 0x14
    2eea:	8b 8b       	std	Y+19, r24	; 0x13
    2eec:	8b 89       	ldd	r24, Y+19	; 0x13
    2eee:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef0:	98 8b       	std	Y+16, r25	; 0x10
    2ef2:	8f 87       	std	Y+15, r24	; 0x0f
    2ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef6:	98 89       	ldd	r25, Y+16	; 0x10
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <buzzerled+0x116>
    2efc:	98 8b       	std	Y+16, r25	; 0x10
    2efe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LED_off(LED_RED);
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LED_off>
		LED_off(LED_GREEN);
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LED_off>
		LED_off(LED_BLUE);
    2f0c:	82 e0       	ldi	r24, 0x02	; 2
    2f0e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LED_off>
		Buzzer_off();
    2f12:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Buzzer_off>
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	aa ef       	ldi	r26, 0xFA	; 250
    2f1c:	b3 e4       	ldi	r27, 0x43	; 67
    2f1e:	8b 87       	std	Y+11, r24	; 0x0b
    2f20:	9c 87       	std	Y+12, r25	; 0x0c
    2f22:	ad 87       	std	Y+13, r26	; 0x0d
    2f24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	4a e7       	ldi	r20, 0x7A	; 122
    2f34:	55 e4       	ldi	r21, 0x45	; 69
    2f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	8f 83       	std	Y+7, r24	; 0x07
    2f40:	98 87       	std	Y+8, r25	; 0x08
    2f42:	a9 87       	std	Y+9, r26	; 0x09
    2f44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f46:	6f 81       	ldd	r22, Y+7	; 0x07
    2f48:	78 85       	ldd	r23, Y+8	; 0x08
    2f4a:	89 85       	ldd	r24, Y+9	; 0x09
    2f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e8       	ldi	r20, 0x80	; 128
    2f54:	5f e3       	ldi	r21, 0x3F	; 63
    2f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f5a:	88 23       	and	r24, r24
    2f5c:	2c f4       	brge	.+10     	; 0x2f68 <buzzerled+0x186>
		__ticks = 1;
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	9e 83       	std	Y+6, r25	; 0x06
    2f64:	8d 83       	std	Y+5, r24	; 0x05
    2f66:	3f c0       	rjmp	.+126    	; 0x2fe6 <buzzerled+0x204>
	else if (__tmp > 65535)
    2f68:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6a:	78 85       	ldd	r23, Y+8	; 0x08
    2f6c:	89 85       	ldd	r24, Y+9	; 0x09
    2f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	3f ef       	ldi	r19, 0xFF	; 255
    2f74:	4f e7       	ldi	r20, 0x7F	; 127
    2f76:	57 e4       	ldi	r21, 0x47	; 71
    2f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f7c:	18 16       	cp	r1, r24
    2f7e:	4c f5       	brge	.+82     	; 0x2fd2 <buzzerled+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	40 e2       	ldi	r20, 0x20	; 32
    2f8e:	51 e4       	ldi	r21, 0x41	; 65
    2f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	bc 01       	movw	r22, r24
    2f9a:	cd 01       	movw	r24, r26
    2f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	9e 83       	std	Y+6, r25	; 0x06
    2fa6:	8d 83       	std	Y+5, r24	; 0x05
    2fa8:	0f c0       	rjmp	.+30     	; 0x2fc8 <buzzerled+0x1e6>
    2faa:	80 e9       	ldi	r24, 0x90	; 144
    2fac:	91 e0       	ldi	r25, 0x01	; 1
    2fae:	9c 83       	std	Y+4, r25	; 0x04
    2fb0:	8b 83       	std	Y+3, r24	; 0x03
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	f1 f7       	brne	.-4      	; 0x2fb6 <buzzerled+0x1d4>
    2fba:	9c 83       	std	Y+4, r25	; 0x04
    2fbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	9e 83       	std	Y+6, r25	; 0x06
    2fc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fca:	9e 81       	ldd	r25, Y+6	; 0x06
    2fcc:	00 97       	sbiw	r24, 0x00	; 0
    2fce:	69 f7       	brne	.-38     	; 0x2faa <buzzerled+0x1c8>
    2fd0:	75 c0       	rjmp	.+234    	; 0x30bc <buzzerled+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd4:	78 85       	ldd	r23, Y+8	; 0x08
    2fd6:	89 85       	ldd	r24, Y+9	; 0x09
    2fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9e 83       	std	Y+6, r25	; 0x06
    2fe4:	8d 83       	std	Y+5, r24	; 0x05
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fea:	9a 83       	std	Y+2, r25	; 0x02
    2fec:	89 83       	std	Y+1, r24	; 0x01
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <buzzerled+0x210>
    2ff6:	9a 83       	std	Y+2, r25	; 0x02
    2ff8:	89 83       	std	Y+1, r24	; 0x01
    2ffa:	60 c0       	rjmp	.+192    	; 0x30bc <buzzerled+0x2da>
		_delay_ms(500);
	}
	else if(distance>=6&&distance<=10){
    2ffc:	80 91 85 00 	lds	r24, 0x0085
    3000:	90 91 86 00 	lds	r25, 0x0086
    3004:	86 30       	cpi	r24, 0x06	; 6
    3006:	91 05       	cpc	r25, r1
    3008:	98 f0       	brcs	.+38     	; 0x3030 <buzzerled+0x24e>
    300a:	80 91 85 00 	lds	r24, 0x0085
    300e:	90 91 86 00 	lds	r25, 0x0086
    3012:	8b 30       	cpi	r24, 0x0B	; 11
    3014:	91 05       	cpc	r25, r1
    3016:	60 f4       	brcc	.+24     	; 0x3030 <buzzerled+0x24e>
		LED_on(LED_RED);
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LED_on>
		LED_on(LED_GREEN);
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LED_on>
		LED_on(LED_BLUE);
    3024:	82 e0       	ldi	r24, 0x02	; 2
    3026:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LED_on>
		Buzzer_off();
    302a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Buzzer_off>
    302e:	46 c0       	rjmp	.+140    	; 0x30bc <buzzerled+0x2da>
	}
	else if(distance>=11&&distance<=15){
    3030:	80 91 85 00 	lds	r24, 0x0085
    3034:	90 91 86 00 	lds	r25, 0x0086
    3038:	8b 30       	cpi	r24, 0x0B	; 11
    303a:	91 05       	cpc	r25, r1
    303c:	98 f0       	brcs	.+38     	; 0x3064 <buzzerled+0x282>
    303e:	80 91 85 00 	lds	r24, 0x0085
    3042:	90 91 86 00 	lds	r25, 0x0086
    3046:	80 31       	cpi	r24, 0x10	; 16
    3048:	91 05       	cpc	r25, r1
    304a:	60 f4       	brcc	.+24     	; 0x3064 <buzzerled+0x282>
		LED_on(LED_RED);
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LED_on>
		LED_on(LED_GREEN);
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LED_on>
		LED_off(LED_BLUE);
    3058:	82 e0       	ldi	r24, 0x02	; 2
    305a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LED_off>
		Buzzer_off();
    305e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Buzzer_off>
    3062:	2c c0       	rjmp	.+88     	; 0x30bc <buzzerled+0x2da>
	}
	else if(distance>=16&&distance<=20){
    3064:	80 91 85 00 	lds	r24, 0x0085
    3068:	90 91 86 00 	lds	r25, 0x0086
    306c:	80 31       	cpi	r24, 0x10	; 16
    306e:	91 05       	cpc	r25, r1
    3070:	98 f0       	brcs	.+38     	; 0x3098 <buzzerled+0x2b6>
    3072:	80 91 85 00 	lds	r24, 0x0085
    3076:	90 91 86 00 	lds	r25, 0x0086
    307a:	85 31       	cpi	r24, 0x15	; 21
    307c:	91 05       	cpc	r25, r1
    307e:	60 f4       	brcc	.+24     	; 0x3098 <buzzerled+0x2b6>
		LED_on(LED_RED);
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LED_on>
		LED_off(LED_GREEN);
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LED_off>
		LED_off(LED_BLUE);
    308c:	82 e0       	ldi	r24, 0x02	; 2
    308e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LED_off>
		Buzzer_off();
    3092:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Buzzer_off>
    3096:	12 c0       	rjmp	.+36     	; 0x30bc <buzzerled+0x2da>
	}
	else if(distance>20){
    3098:	80 91 85 00 	lds	r24, 0x0085
    309c:	90 91 86 00 	lds	r25, 0x0086
    30a0:	85 31       	cpi	r24, 0x15	; 21
    30a2:	91 05       	cpc	r25, r1
    30a4:	58 f0       	brcs	.+22     	; 0x30bc <buzzerled+0x2da>
		LED_off(LED_RED);
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LED_off>
		LED_off(LED_GREEN);
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LED_off>
		LED_off(LED_BLUE);
    30b2:	82 e0       	ldi	r24, 0x02	; 2
    30b4:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LED_off>
		Buzzer_off();
    30b8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Buzzer_off>
	}
}
    30bc:	6c 96       	adiw	r28, 0x1c	; 28
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	de bf       	out	0x3e, r29	; 62
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	cd bf       	out	0x3d, r28	; 61
    30c8:	cf 91       	pop	r28
    30ca:	df 91       	pop	r29
    30cc:	08 95       	ret

000030ce <main>:

int main(void){
    30ce:	df 93       	push	r29
    30d0:	cf 93       	push	r28
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_init();
    30d6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Ultrasonic_init>
	LCD_init();
    30da:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <LCD_init>
	LEDS_init();
    30de:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <LEDS_init>
	Buzzer_init();
    30e2:	0e 94 88 07 	call	0xf10	; 0xf10 <Buzzer_init>

	while(1){
		sei();
    30e6:	78 94       	sei
		distance = Ultrasonic_readDistance();
    30e8:	0e 94 45 07 	call	0xe8a	; 0xe8a <Ultrasonic_readDistance>
    30ec:	90 93 86 00 	sts	0x0086, r25
    30f0:	80 93 85 00 	sts	0x0085, r24
		buzzerled();
    30f4:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <buzzerled>
		display();
    30f8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <display>
    30fc:	f4 cf       	rjmp	.-24     	; 0x30e6 <main+0x18>

000030fe <__udivmodhi4>:
    30fe:	aa 1b       	sub	r26, r26
    3100:	bb 1b       	sub	r27, r27
    3102:	51 e1       	ldi	r21, 0x11	; 17
    3104:	07 c0       	rjmp	.+14     	; 0x3114 <__udivmodhi4_ep>

00003106 <__udivmodhi4_loop>:
    3106:	aa 1f       	adc	r26, r26
    3108:	bb 1f       	adc	r27, r27
    310a:	a6 17       	cp	r26, r22
    310c:	b7 07       	cpc	r27, r23
    310e:	10 f0       	brcs	.+4      	; 0x3114 <__udivmodhi4_ep>
    3110:	a6 1b       	sub	r26, r22
    3112:	b7 0b       	sbc	r27, r23

00003114 <__udivmodhi4_ep>:
    3114:	88 1f       	adc	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	5a 95       	dec	r21
    311a:	a9 f7       	brne	.-22     	; 0x3106 <__udivmodhi4_loop>
    311c:	80 95       	com	r24
    311e:	90 95       	com	r25
    3120:	bc 01       	movw	r22, r24
    3122:	cd 01       	movw	r24, r26
    3124:	08 95       	ret

00003126 <__prologue_saves__>:
    3126:	2f 92       	push	r2
    3128:	3f 92       	push	r3
    312a:	4f 92       	push	r4
    312c:	5f 92       	push	r5
    312e:	6f 92       	push	r6
    3130:	7f 92       	push	r7
    3132:	8f 92       	push	r8
    3134:	9f 92       	push	r9
    3136:	af 92       	push	r10
    3138:	bf 92       	push	r11
    313a:	cf 92       	push	r12
    313c:	df 92       	push	r13
    313e:	ef 92       	push	r14
    3140:	ff 92       	push	r15
    3142:	0f 93       	push	r16
    3144:	1f 93       	push	r17
    3146:	cf 93       	push	r28
    3148:	df 93       	push	r29
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
    314e:	ca 1b       	sub	r28, r26
    3150:	db 0b       	sbc	r29, r27
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	09 94       	ijmp

0000315e <__epilogue_restores__>:
    315e:	2a 88       	ldd	r2, Y+18	; 0x12
    3160:	39 88       	ldd	r3, Y+17	; 0x11
    3162:	48 88       	ldd	r4, Y+16	; 0x10
    3164:	5f 84       	ldd	r5, Y+15	; 0x0f
    3166:	6e 84       	ldd	r6, Y+14	; 0x0e
    3168:	7d 84       	ldd	r7, Y+13	; 0x0d
    316a:	8c 84       	ldd	r8, Y+12	; 0x0c
    316c:	9b 84       	ldd	r9, Y+11	; 0x0b
    316e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3170:	b9 84       	ldd	r11, Y+9	; 0x09
    3172:	c8 84       	ldd	r12, Y+8	; 0x08
    3174:	df 80       	ldd	r13, Y+7	; 0x07
    3176:	ee 80       	ldd	r14, Y+6	; 0x06
    3178:	fd 80       	ldd	r15, Y+5	; 0x05
    317a:	0c 81       	ldd	r16, Y+4	; 0x04
    317c:	1b 81       	ldd	r17, Y+3	; 0x03
    317e:	aa 81       	ldd	r26, Y+2	; 0x02
    3180:	b9 81       	ldd	r27, Y+1	; 0x01
    3182:	ce 0f       	add	r28, r30
    3184:	d1 1d       	adc	r29, r1
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	de bf       	out	0x3e, r29	; 62
    318c:	0f be       	out	0x3f, r0	; 63
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	ed 01       	movw	r28, r26
    3192:	08 95       	ret

00003194 <itoa>:
    3194:	fb 01       	movw	r30, r22
    3196:	9f 01       	movw	r18, r30
    3198:	e8 94       	clt
    319a:	42 30       	cpi	r20, 0x02	; 2
    319c:	c4 f0       	brlt	.+48     	; 0x31ce <itoa+0x3a>
    319e:	45 32       	cpi	r20, 0x25	; 37
    31a0:	b4 f4       	brge	.+44     	; 0x31ce <itoa+0x3a>
    31a2:	4a 30       	cpi	r20, 0x0A	; 10
    31a4:	29 f4       	brne	.+10     	; 0x31b0 <itoa+0x1c>
    31a6:	97 fb       	bst	r25, 7
    31a8:	1e f4       	brtc	.+6      	; 0x31b0 <itoa+0x1c>
    31aa:	90 95       	com	r25
    31ac:	81 95       	neg	r24
    31ae:	9f 4f       	sbci	r25, 0xFF	; 255
    31b0:	64 2f       	mov	r22, r20
    31b2:	77 27       	eor	r23, r23
    31b4:	0e 94 7f 18 	call	0x30fe	; 0x30fe <__udivmodhi4>
    31b8:	80 5d       	subi	r24, 0xD0	; 208
    31ba:	8a 33       	cpi	r24, 0x3A	; 58
    31bc:	0c f0       	brlt	.+2      	; 0x31c0 <itoa+0x2c>
    31be:	89 5d       	subi	r24, 0xD9	; 217
    31c0:	81 93       	st	Z+, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	a1 f7       	brne	.-24     	; 0x31b0 <itoa+0x1c>
    31c8:	16 f4       	brtc	.+4      	; 0x31ce <itoa+0x3a>
    31ca:	5d e2       	ldi	r21, 0x2D	; 45
    31cc:	51 93       	st	Z+, r21
    31ce:	10 82       	st	Z, r1
    31d0:	c9 01       	movw	r24, r18
    31d2:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <strrev>

000031d6 <strrev>:
    31d6:	dc 01       	movw	r26, r24
    31d8:	fc 01       	movw	r30, r24
    31da:	67 2f       	mov	r22, r23
    31dc:	71 91       	ld	r23, Z+
    31de:	77 23       	and	r23, r23
    31e0:	e1 f7       	brne	.-8      	; 0x31da <strrev+0x4>
    31e2:	32 97       	sbiw	r30, 0x02	; 2
    31e4:	04 c0       	rjmp	.+8      	; 0x31ee <strrev+0x18>
    31e6:	7c 91       	ld	r23, X
    31e8:	6d 93       	st	X+, r22
    31ea:	70 83       	st	Z, r23
    31ec:	62 91       	ld	r22, -Z
    31ee:	ae 17       	cp	r26, r30
    31f0:	bf 07       	cpc	r27, r31
    31f2:	c8 f3       	brcs	.-14     	; 0x31e6 <strrev+0x10>
    31f4:	08 95       	ret

000031f6 <_exit>:
    31f6:	f8 94       	cli

000031f8 <__stop_program>:
    31f8:	ff cf       	rjmp	.-2      	; 0x31f8 <__stop_program>
